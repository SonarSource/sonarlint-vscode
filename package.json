{
  "name": "sonarlint-vscode",
  "displayName": "SonarQube for IDE",
  "description": "Advanced linter to detect & fix coding issues locally in JS/TS, Python, Java, C#, C/C++, Go, PHP.  Use with SonarQube (Server, Cloud) for optimal team performance.",
  "version": "4.26.0",
  "icon": "images/sonarqube_for_ide_128px.png",
  "publisher": "SonarSource",
  "homepage": "https://www.sonarsource.com/products/sonarlint/",
  "repository": {
    "type": "git",
    "url": "https://github.com/SonarSource/sonarlint-vscode.git"
  },
  "bugs": {
    "url": "https://community.sonarsource.com/c/sl/vs-code/36"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "engines": {
    "vscode": "^1.82.0"
  },
  "categories": [
    "Linters",
    "Education",
    "Programming Languages",
    "Notebooks",
    "AI"
  ],
  "keywords": [
    "AI",
    "Education",
    "Vulnerability",
    "Security",
    "SonarQube",
    "Static Code Analysis",
    "Code Quality",
    "language-model-tools",
    "IaC",
    "Go",
    "C++",
    "Java",
    "JavaScript",
    "C#",
    "Python",
    "TypeScript",
    "Jupyter"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "capabilities": {
    "virtualWorkspaces": false
  },
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "SonarLint",
      "properties": {
        "sonarlint.rules": {
          "order": 1,
          "type": "object",
          "scope": "application",
          "default": {},
          "markdownDescription": "Customize applied rule set. This property contains a list of rules whose activation level or parameter values differ from the one provided by default. In [Connected Mode](command:SonarLint.HelpAndFeedbackLinkClicked?%22connectedModeDocs%22), this configuration is overridden by the projects's Quality Profile, as configured on server side and can be **shared among contributors**. See [SonarLint Rules](command:SonarLint.AllRules.focus) view for the list of **locally** available rules.\n\nExample:\n\n    \"sonarlint.rules\": {\n        \"javascript:S1481\": {\n            \"level\": \"off\",\n         },\n        \"javascript:S103\": {\n            \"level\": \"on\",\n            \"parameters\": {\n                \"maximumLineLength\": \"120\"\n            }\n        }\n    }\n",
          "patternProperties": {
            "^[^:]+:[^:]+$": {
              "type": "object",
              "markdownDescription": "Property names are rule keys in the form: `repo:key`",
              "properties": {
                "level": {
                  "type": "string",
                  "enum": [
                    "off",
                    "on"
                  ],
                  "markdownDescription": "When set to `off`, disable the rule. When set to `on`, enable the rule."
                },
                "parameters": {
                  "type": "object",
                  "markdownDescription": "Rule parameters. See rule description for accepted parameters. E.g `{ \"intParam\": \"123\" }`."
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "sonarlint.connectedMode.servers": {
          "deprecationMessage": "The setting is deprecated. Use `sonarlint.connectedMode.connections.sonarqube` or `sonarlint.connectedMode.connections.sonarcloud` instead.",
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Configure one or more connection(s) to SonarQube (Server, Cloud). For security reasons, the token should not be stored in SCM with workspace settings. The `serverId` can be any identifier and will be referenced in `#sonarlint.connectedMode.project#`.\n\nExample for SonarQube Cloud:\n\n    \"sonarlint.connectedMode.servers\": [\n      {\n        \"serverId\": \"my_orga_in_sonarcloud.io\",\n        \"serverUrl\": \"https://sonarcloud.io\",\n        \"organizationKey\": \"my_organization\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]\n\nExample for SonarQube Server:\n\n    \"sonarlint.connectedMode.servers\": [\n      {\n        \"serverId\": \"my_sonarqube\",\n        \"serverUrl\": \"https://sonar.mycompany.com\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]",
          "items": {
            "properties": {
              "serverId": {
                "type": "string",
                "description": "A unique identifier for this server connection. Will be referenced from `#sonarlint.connectedMode.project#`"
              },
              "serverUrl": {
                "type": "string",
                "description": "URL of the server. Use https://sonarcloud.io for SonarQube Cloud."
              },
              "token": {
                "type": "string",
                "description": "Token generated from My Account>Security in SonarQube (Server, Cloud)"
              },
              "organizationKey": {
                "type": "string",
                "description": "Only used for SonarQube Cloud"
              }
            },
            "additionalProperties": false
          }
        },
        "sonarlint.connectedMode.connections.sonarqube": {
          "order": 2,
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Connect SonarQube for VS Code to SonarQube Server to apply the same Clean Code standards as your team. Analyze more languages, detect more issues **on the whole project**, receive notifications about the quality gate status, and more. Quality Profiles and file exclusion settings defined on the server are shared between all connected users. Please find the documentation [here](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/team-features/connected-mode/)",
          "items": {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "A unique identifier for this connection to be used as a reference in `#sonarlint.connectedMode.project#`. Only needed if you plan to use multiple connections to SonarQube (Server, Cloud)."
              },
              "serverUrl": {
                "type": "string",
                "description": "URL of the SonarQube Server."
              },
              "token": {
                "type": "string",
                "description": "Token generated from 'My Account>Security' in SonarQube Server"
              },
              "disableNotifications": {
                "type": "boolean",
                "description": "SonarQube for VS Code will show notifications for bound projects when there are new issues assigned to you, or when the quality gate status changed. Set to false to disable all notifications for projects bound to this connection."
              }
            },
            "additionalProperties": false,
            "required": [
              "serverUrl"
            ],
            "examples": [
              {
                "serverUrl": "https://<replace_with_your_sonarqube_server_url>"
              },
              {
                "connectionId": "MyCompanySonarQube",
                "serverUrl": "https://<replace_with_your_sonarqube_server_url>",
                "disableNotifications": false
              }
            ]
          }
        },
        "sonarlint.connectedMode.connections.sonarcloud": {
          "order": 3,
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Connect SonarQube for VS Code to SonarQube Cloud to apply the same Clean Code standards as your team. Analyze more languages, detect more issues **on the whole project**, receive notifications about the quality gate status, and more. Quality Profiles and file exclusion settings defined on the server are shared between all connected users. Please find the documentation [here](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/team-features/connected-mode/)",
          "items": {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "A unique identifier for this connection to be used as a reference in `#sonarlint.connectedMode.project#`. Only needed if you plan to use multiple connections to SonarQube (Server, Cloud)."
              },
              "region": {
                "type": "string",
                "enum": [
                  "EU",
                  "US"
                ],
                "description": "Region of the SonarQube Cloud instance. Use 'US' for `sonarqube.us`, 'EU' for `sonarcloud.io`."
              },
              "organizationKey": {
                "type": "string",
                "description": "A SonarQube Cloud organization key. If you want to bind different projects that are in different organizations, simply declare multiple connections."
              },
              "token": {
                "type": "string",
                "description": "Token generated from 'My Account>Security' in SonarQube Cloud"
              },
              "disableNotifications": {
                "type": "boolean",
                "description": "SonarQube for VS Code will show notifications for bound projects when there are new issues assigned to you, or when the quality gate status changed. Set to false to disable all notifications for projects bound to this connection."
              }
            },
            "additionalProperties": false,
            "required": [
              "organizationKey"
            ],
            "examples": [
              {
                "organizationKey": "<replace_with_your_sonarqube_cloud_organization_key>"
              },
              {
                "connectionId": "MyOrganization",
                "organizationKey": "<replace_with_your_sonarqube_cloud_organization_key>",
                "disableNotifications": false
              }
            ]
          }
        },
        "sonarlint.connectedMode.project": {
          "order": 4,
          "markdownDescription": "Bind the current workspace folder to a [SonarQube Server](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarQubeProductPage%22) or [SonarQube Cloud](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarCloudProductPage%22) project. Requires connection details to be defined in the setting `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`.\n\nBinding a workspace folder to a server project allows SonarQube for VS Code to match, as much as possible, the same rules and settings as found on the server, and hence share the analysis configuration with other contributors.\n\nExample:\n\n    \"sonarlint.connectedMode.project\": {\n      \"projectKey\": \"my_project\",\n      \"connectionId\":\"my_connection_id\"\n    }\n\n",
          "examples": [
            {
              "projectKey": "<replace_with_server_project_key>"
            },
            {
              "connectionId": "<replace_with_connection_id>",
              "projectKey": "<replace_with_server_project_key>"
            }
          ],
          "default": {},
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "serverId": {
                  "type": "string",
                  "description": "Identifier of the server connection declared in `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`"
                },
                "projectKey": {
                  "type": "string",
                  "description": "Key of the project in SonarQube (Server, Cloud)"
                }
              },
              "additionalProperties": false,
              "required": [
                "serverId",
                "projectKey"
              ],
              "deprecationMessage": "Replace `serverId` attribute by `connectionId`."
            },
            {
              "type": "object",
              "properties": {
                "connectionId": {
                  "type": "string",
                  "description": "Identifier of the server connection declared in `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`"
                },
                "projectKey": {
                  "type": "string",
                  "description": "Key of the project in SonarQube Server or SonarQube Cloud (can be found on project homepage)"
                }
              },
              "additionalProperties": false,
              "required": [
                "projectKey"
              ]
            }
          ],
          "scope": "resource"
        },
        "sonarlint.pathToNodeExecutable": {
          "order": 10,
          "type": "string",
          "markdownDescription": "Path to a Node.js executable (18.18 or more recent) used to analyze JavaScript and TypeScript code. \nOn Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\NodeJS\\\\20-lts\\\\bin\\\\node.exe`",
          "scope": "machine"
        },
        "sonarlint.pathToCompileCommands": {
          "order": 11,
          "type": "string",
          "markdownDescription": "Path to the active compilation database, e.g. `C:\\\\Repos\\\\MyProject\\\\compile_commands.json`",
          "scope": "resource"
        },
        "sonarlint.testFilePattern": {
          "order": 12,
          "type": "string",
          "default": "",
          "markdownDescription": "Files whose name match this [glob pattern](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) are considered as test files by analyzers. Most rules are *not* evaluated on test files.\n\nIn [Connected Mode](command:SonarLint.HelpAndFeedbackLinkClicked?%22connectedModeDocs%22), this setting is configured **on the server-side** and shared among all contributors.\n\nExample: `**/test/**,**/*test*,**/*Test*`",
          "scope": "resource"
        },
        "sonarlint.analysisExcludesStandalone": {
          "order": 13,
          "type": "string",
          "default": "",
          "markdownDescription": "Files whose name match this [glob pattern](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) will not be processed by analyzers. In [Connected Mode](command:SonarLint.HelpAndFeedbackLinkClicked?%22connectedModeDocs%22) with SonarQube Server or SonarQube Cloud, this property will be ignored and the server's exclusion settings will be applied. No rules are evaluated on excluded files. Example: `**/lib/**,**/*generated*`",
          "scope": "resource"
        },
        "sonarlint.ls.javaHome": {
          "order": 20,
          "type": "string",
          "markdownDescription": "Path to a Java Runtime Environment (17 or more recent) used to launch the SonarQube for VS Code Language Server.\n* On Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\Java\\\\jdk-17` \n* On macOS, this path should include the `/Contents/Home` directory, e.g `/Library/Java/JavaVirtualMachines/corretto-17.0.5/Contents/Home`",
          "scope": "machine"
        },
        "sonarlint.ls.vmargs": {
          "order": 21,
          "type": "string",
          "markdownDescription": "Extra JVM arguments used to launch the SonarLint Language Server. e.g. `-Xmx1024m`",
          "scope": "machine"
        },
        "sonarlint.output.showVerboseLogs": {
          "order": 90,
          "type": "boolean",
          "default": false,
          "description": "Enable verbose log level in the SonarQube for IDE output.",
          "scope": "window"
        },
        "sonarlint.output.showAnalyzerLogs": {
          "order": 91,
          "type": "boolean",
          "default": false,
          "description": "Show analyzer's logs in the SonarQube for IDE output.",
          "scope": "window"
        },
        "sonarlint.analyzerProperties": {
          "order": 92,
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "type": "string",
              "markdownDescription": "One entry value"
            },
            "additionalProperties": false
          },
          "markdownDescription": "Extra properties that could be passed to the code analyzers. Only for advanced use cases.",
          "scope": "resource"
        },
        "sonarlint.trace.server": {
          "order": 98,
          "default": "off",
          "description": "Traces the communication between VS Code and the SonarLint language server.",
          "scope": "window",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "off",
                "messages",
                "verbose"
              ],
              "default": "off"
            },
            {
              "type": "object",
              "properties": {
                "verbosity": {
                  "type": "string",
                  "enum": [
                    "off",
                    "messages",
                    "verbose"
                  ],
                  "default": "off"
                },
                "format": {
                  "type": "string",
                  "enum": [
                    "text",
                    "json"
                  ],
                  "default": "text"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "sonarlint.disableTelemetry": {
          "order": 99,
          "type": "boolean",
          "default": false,
          "markdownDescription": "Disable sending anonymous usage statistics to SonarSource. Click [here](https://github.com/SonarSource/sonarlint-vscode/blob/master/telemetry-sample.md) to see a sample of the data that are collected.",
          "scope": "window"
        },
        "sonarlint.focusOnNewCode": {
          "order": 100,
          "type": "boolean",
          "default": false,
          "markdownDescription": "Highlight issues in new code.\n\nFocusing on new code helps you practice [Clean as You Code](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/clean-as-you-code-in-the-ide/).\n\nIn [Connected Mode](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/team-features/connected-mode/) you benefit from a more accurate new code definition based on your SonarQube (Server, Cloud) settings.\n\nWithout Connected Mode (in standalone mode), any code added or changed in the **last 30 days** is considered new code.",
          "scope": "machine"
        },
        "sonarlint.earlyAccess.showRegionSelection": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Show region selection while creating SonarQube Cloud Connection _(Early Access)_",
          "scope": "machine"
        }
      }
    },
    "commands": [
      {
        "command": "SonarLint.ShowSonarLintOutput",
        "title": "Show SonarQube for IDE Output",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.ReopenLocalIssues",
        "title": "Reopen Local Issues for current file",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.AnalyseOpenFile",
        "title": "Analyse current file ignoring excludes",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.ConfigureCompilationDatabase",
        "title": "Configure the compilation database for C and C++ analysis",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.AutoBindWorkspaceFolders",
        "title": "Bind all workspace folders to SonarQube (Server, Cloud)",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.DeactivateRule",
        "title": "Deactivate",
        "icon": "$(x)",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ActivateRule",
        "title": "Activate",
        "icon": "$(check)",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ResetDefaultRule",
        "title": "Reset",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowAllRules",
        "title": "All",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowActiveRules",
        "title": "Active",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowInactiveRules",
        "title": "Inactive",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ScanForHotspotsInFolder",
        "title": "Scan for Hotspots in Folder",
        "category": "SonarQube"
      },
      {
        "command": "SonarQube.ShowAllInfoForFinding",
        "title": "Show finding location and details"
      },
      {
        "command": "SonarLint.FindRuleByKey",
        "title": "Find Rule By Key",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ClearLocations",
        "title": "Clear",
        "enablement": "view == SonarLint.IssueLocations || view == SonarQube.Findings"
      },
      {
        "command": "SonarLint.ClearHotspotLocations",
        "title": "Clear Highlighting",
        "enablement": "view == SonarQube.Findings"
      },
      {
        "command": "SonarLint.TriggerBrowseTaintCommand",
        "title": "Open Taint Vulnerability on remote server",
        "enablement": "view == SonarQube.Findings"
      },
      {
        "command": "SonarQube.TriggerAiCodeFixCommand",
        "title": "✧˖° Fix with AI CodeFix",
        "enablement": "view == SonarQube.Findings"
      },
      {
        "command": "SonarQube.TriggerResolveTaintCommand",
        "title": "Resolve issue as...",
        "enablement": "view == SonarQube.Findings"
      },
      {
        "command": "SonarLint.ConnectToSonarQube",
        "title": "Connect to SonarQube Server",
        "category": "SonarQube",
        "icon": "$(plus)"
      },
      {
        "command": "SonarLint.ConnectToSonarCloud",
        "title": "Connect to SonarQube Cloud",
        "category": "SonarQube",
        "icon": "$(plus)"
      },
      {
        "command": "SonarLint.EditSonarQubeConnection",
        "title": "Edit SonarQube Server Connection",
        "category": "SonarQube",
        "icon": "$(pencil)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.EditSonarCloudConnection",
        "title": "Edit SonarQube Cloud Connection",
        "category": "SonarQube",
        "icon": "$(pencil)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.AddProjectBinding",
        "title": "Add Project Binding",
        "category": "SonarQube",
        "icon": "$(plus)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.RemoveConnection",
        "title": "Remove Connection",
        "category": "SonarQube",
        "icon": "$(trash)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.EditProjectBinding",
        "title": "Edit Project Binding",
        "category": "SonarQube",
        "icon": "$(pencil)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.RemoveProjectBinding",
        "title": "Remove Project Binding",
        "category": "SonarQube",
        "icon": "$(trash)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.OpenHotspotOnServer",
        "title": "Review on Server",
        "category": "SonarQube",
        "enablement": "view == SonarQube.Findings && viewItem == knownHotspotItem"
      },
      {
        "command": "SonarLint.ShowHotspotRuleDescription",
        "title": "Show Rule Description",
        "category": "SonarQube",
        "enablement": "view == SonarQube.Findings && viewItem == newHotspotItem"
      },
      {
        "command": "SonarLint.ShowHotspotDetails",
        "title": "Show Hotspot Details",
        "category": "SonarQube",
        "enablement": "view == SonarQube.Findings && viewItem == knownHotspotItem"
      },
      {
        "command": "SonarLint.ChangeHotspotStatus",
        "title": "Change Status",
        "category": "SonarQube",
        "enablement": "view == SonarQube.Findings && viewItem == knownHotspotItem"
      },
      {
        "command": "SonarLint.HelpAndFeedbackLinkClicked",
        "title": "Share feedback",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.EnableVerboseLogs",
        "title": "Enable Verbose Logging",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.EnableLogsAndShowOutput",
        "title": "Enable Verbose Logging and Show Output",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.ShareConnectedModeConfiguration",
        "title": "Share Connected Mode Configuration",
        "category": "SonarQube",
        "icon": "$(export)",
        "enablement": "view == SonarLint.ConnectedMode"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "icon": "images/sonarqube_for_ide.svg",
          "id": "SonarLint",
          "title": "SonarQube Setup"
        }
      ],
      "panel": [
        {
          "icon": "images/sonarqube_for_ide.svg",
          "id": "SonarQube",
          "title": "SonarQube",
          "when": "sonarqube.someFoldersUseConnectedMode"
        }
      ]
    },
    "views": {
      "explorer": [
        {
          "id": "SonarLint.IssueLocations",
          "name": "SonarQube Issue Locations",
          "when": "sonarqube.hasExploredIssueLocations"
        }
      ],
      "SonarLint": [
        {
          "type": "tree",
          "id": "SonarQube.GetStarted",
          "name": "Get Started",
          "when": "sonarqube.shouldShowGetStartedView"
        },
        {
          "id": "SonarLint.ConnectedMode",
          "name": "Connected Mode"
        },
        {
          "id": "SonarLint.AllRules",
          "name": "Rules",
          "visibility": "collapsed",
          "when": "sonarqube.someFoldersUseStandaloneMode"
        },
        {
          "id": "SonarLint.HelpAndFeedback",
          "name": "Help and Feedback"
        }
      ],
      "SonarQube": [
        {
          "id": "SonarQube.Findings",
          "name": "SonarQube Findings",
          "when": "sonarqube.someFoldersUseConnectedMode"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "SonarLint.IssueLocations",
        "contents": "No locations to show.\nUse \"Show all locations\" code action from a SonarQube for VS Code issue in the \"Problems\" view.\n[Show Problems](command:workbench.panel.markers.view.focus)"
      },
      {
        "view": "SonarLint.ConnectedMode",
        "contents": "[Connected Mode](command:SonarLint.HelpAndFeedbackLinkClicked?%22connectedModeDocs%22) links SonarQube for IDE to SonarQube Server or SonarQube Cloud projects. \n\n[Connect to SonarQube Server](command:SonarLint.ConnectToSonarQube)\n[Connect to SonarQube Cloud](command:SonarLint.ConnectToSonarCloud)\n\nAnalyze more languages, detect more issues on the whole project, receive notifications about the quality gate status, and more."
      },
      {
        "view": "SonarQube.GetStarted",
        "contents": "Automatically find and fix code quality and security issues as you write, using powerful linting tools built right into your code editor.\n\n[Get Started with SonarQube for IDE](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarLintWalkthrough%22) $(arrow-right)"
      },
      {
        "view": "SonarQube.Findings",
        "contents": "No [Security Hotspots](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/using/security-hotspots/) or [Taint Vulnerabilities](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/using/taint-vulnerabilities/) found in this project."
      }
    ],
    "walkthroughs": [
      {
        "id": "SonarLint.walkthrough",
        "title": "Welcome to SonarQube for IDE!",
        "description": "Start left and discover issues early.\nSonarQube for IDE empowers you to find & fix code issues in real time, in 15+ languages.",
        "steps": [
          {
            "id": "SonarQube.getStarted",
            "title": "$(rocket) New to SonarQube?",
            "description": "Unlock more languages and security rules.\n[Create Free Account](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarqubeCloudFreeSignUp%22)",
            "media": {
              "image": "walkthrough/abstractServerProduct.svg",
              "altText": "SonarQube Cloud illustration"
            },
            "completionEvents": [
              "onLink:https://www.sonarsource.com/products/sonarcloud/signup-free/"
            ]
          },
          {
            "id": "SonarLint.connectedModeIntro",
            "title": "$(shield) Taint Vulnerabilities and More",
            "description": "Enable advanced analysis (including [Taint Vulnerabilities](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/using/taint-vulnerabilities/) and wider language support) by connecting to SonarQube (Server, Cloud). Also, benefit from the [AI CodeFix](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/ai-capabilities/ai-codefix/) within your IDE.\n[Set up Connection](command:SonarLint.ConnectedMode.focus)\n",
            "media": {
              "image": "walkthrough/taintVulnerabilities.svg",
              "altText": "SonarQube for IDE Taint Vulnerabilities"
            },
            "completionEvents": [
              "onView:SonarLint.ConnectedMode"
            ]
          },
          {
            "id": "SonarLint.reachOut",
            "title": "$(comment-discussion) Share feedback or ask for help",
            "description": "You'd like to learn more about SonarQube for IDE, or give us feedback? Check out the [Help and Feedback view](command:SonarLint.HelpAndFeedback.focus).\n",
            "media": {
              "image": "walkthrough/community.svg",
              "altText": "Sonar Community"
            },
            "completionEvents": [
              "onView:SonarLint.HelpAndFeedback"
            ]
          },
          {
            "id": "SonarLint.resolveIssues",
            "title": "$(bug) Enough theory, let's fix some code!",
            "description": "Open our sample file and get started instantly:\n[Open Sample File](command:SonarLint.OpenSample)\nCheck the [Problems view](command:workbench.panel.markers.view.focus): SonarQube has found something $(warning).\nRight-click on the issue.\nShow issue details: SonarQube explains why this is an issue.\nFor certain rules and issues, SonarQube for IDE will suggest available Quick Fixes.",
            "media": {
              "image": "walkthrough/issueDetected.svg",
              "altText": "SonarQube for IDE Rule Description"
            },
            "completionEvents": [
              "onCommand:SonarLint.ShowIssueDetailsCodeAction"
            ]
          }
        ]
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "SonarLint.ShowAllRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ShowActiveRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ShowInactiveRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.FindRuleByKey",
          "when": "view == SonarLint.AllRules"
        },
        {
          "command": "SonarLint.ClearLocations",
          "when": "view == SonarLint.IssueLocations",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ConnectToSonarQube",
          "when": "view == SonarLint.ConnectedMode",
          "group": "inline"
        },
        {
          "command": "SonarLint.ConnectToSonarCloud",
          "when": "view == SonarLint.ConnectedMode",
          "group": "inline"
        }
      ],
      "view/item/context": [
        {
          "command": "SonarLint.DeactivateRule",
          "when": "view == SonarLint.AllRules && viewItem == rule-on",
          "group": "inline"
        },
        {
          "command": "SonarLint.ActivateRule",
          "when": "view == SonarLint.AllRules && viewItem == rule-off",
          "group": "inline"
        },
        {
          "command": "SonarLint.ConnectToSonarQube",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarQubeGroup",
          "group": "inline"
        },
        {
          "command": "SonarLint.ConnectToSonarCloud",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarCloudGroup",
          "group": "inline"
        },
        {
          "command": "SonarLint.EditSonarQubeConnection",
          "title": "Edit",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarqubeConnection",
          "group": "inline"
        },
        {
          "command": "SonarLint.EditSonarCloudConnection",
          "title": "Edit",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarcloudConnection",
          "group": "inline"
        },
        {
          "command": "SonarLint.AddProjectBinding",
          "title": "Add Project Binding",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarcloudConnection || viewItem == sonarqubeConnection",
          "group": "inline"
        },
        {
          "command": "SonarLint.RemoveConnection",
          "title": "Remove",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarcloudConnection || viewItem == sonarqubeConnection",
          "group": "inline"
        },
        {
          "command": "SonarLint.EditProjectBinding",
          "title": "Edit",
          "when": "view == SonarLint.ConnectedMode && viewItem == workspaceFolder",
          "group": "inline"
        },
        {
          "command": "SonarLint.RemoveProjectBinding",
          "title": "Remove",
          "when": "view == SonarLint.ConnectedMode && viewItem == workspaceFolder",
          "group": "inline"
        },
        {
          "command": "SonarLint.ShareConnectedModeConfiguration",
          "title": "Share",
          "when": "view == SonarLint.ConnectedMode && viewItem == workspaceFolder",
          "group": "inline"
        },
        {
          "command": "SonarLint.ShowHotspotRuleDescription",
          "title": "Show Rule Description",
          "when": "view == SonarQube.Findings && viewItem == newHotspotItem"
        },
        {
          "command": "SonarLint.ShowHotspotDetails",
          "title": "Show Hotspot Details",
          "when": "view == SonarQube.Findings && viewItem == knownHotspotItem"
        },
        {
          "command": "SonarLint.ChangeHotspotStatus",
          "title": "Change Status",
          "when": "view == SonarQube.Findings && viewItem == knownHotspotItem"
        },
        {
          "command": "SonarLint.OpenHotspotOnServer",
          "title": "Review on Server",
          "when": "view == SonarQube.Findings && viewItem == knownHotspotItem"
        },
        {
          "command": "SonarLint.ClearHotspotLocations",
          "title": "Clear Highlighting",
          "when": "view == SonarQube.Findings && viewItem == newHotspotItem || viewItem == knownHotspotItem"
        },
        {
          "command": "SonarLint.TriggerBrowseTaintCommand",
          "title": "Open Taint Vulnerability on remote server",
          "when": "view == SonarQube.Findings && viewItem == taintVulnerabilityItem || viewItem == AICodeFixableTaintVulnerabilityItem"
        },
        {
          "command": "SonarQube.TriggerAiCodeFixCommand",
          "title": "✧˖° Fix with AI CodeFix",
          "when": "view == SonarQube.Findings && viewItem == AICodeFixableTaintVulnerabilityItem"
        },
        {
          "command": "SonarQube.TriggerResolveTaintCommand",
          "title": "Resolve issue as...",
          "when": "view == SonarQube.Findings && viewItem == taintVulnerabilityItem || viewItem == AICodeFixableTaintVulnerabilityItem"
        }
      ]
    },
    "colors": [
      {
        "id": "sonarlint.locations.background",
        "description": "Background color for highlighted secondary locations of SonarLint issues",
        "defaults": {
          "light": "#f2dede",
          "dark": "#523e3e",
          "highContrast": "#523e3e"
        }
      },
      {
        "id": "sonarlint.locations.indexText",
        "description": "Text color for secondary location index of SonarLint issues",
        "defaults": {
          "light": "#fff",
          "dark": "#ccc",
          "highContrast": "#ccc"
        }
      },
      {
        "id": "sonarlint.locations.indexBackground",
        "description": "Background color for secondary location index of SonarLint issues",
        "defaults": {
          "light": "#d18582",
          "dark": "#74232f",
          "highContrast": "#74232f"
        }
      },
      {
        "id": "sonarlint.locations.indexSelectedText",
        "description": "Text color for active secondary location index of SonarLint issues",
        "defaults": {
          "light": "#fff",
          "dark": "#fff",
          "highContrast": "#fff"
        }
      },
      {
        "id": "sonarlint.locations.indexSelectedBackground",
        "description": "Background color for active secondary location index of SonarLint issues",
        "defaults": {
          "light": "#a4030f",
          "dark": "#b4131f",
          "highContrast": "#b4131f"
        }
      }
    ],
    "icons": {
      "security-hotspot": {
        "description": "Security Hotspot",
        "default": {
          "fontPath": "icons/sonarlint.woff",
          "fontCharacter": "H"
        }
      }
    },
    "languageModelTools": [
      {
        "name": "sonarqube_list_potential_security_issues",
        "displayName": "SonarQube: Security Hotspots",
        "toolReferenceName": "sonarqube_getSecurityHotspots",
        "canBeReferencedInPrompt": true,
        "icon": "$(security-hotspot)",
        "modelDescription": "This tool returns a list of potential security issues (Security Hotspots) in a given file. It runs SonarQube analysis on the file and returns a list of Security Hotspots detected with their location and error message.",
        "tags": [
          "sonarqube",
          "security-analysis",
          "linter"
        ],
        "inputSchema": {
          "type": "object",
          "properties": {
            "filePath": {
              "type": "string",
              "description": "The full path to the file for which the potential security issues are to be listed."
            }
          }
        }
      },
      {
        "name": "sonarqube_exclude_from_analysis",
        "displayName": "SonarQube: Exclude File or Folder from Analysis",
        "toolReferenceName": "sonarqube_excludeFiles",
        "canBeReferencedInPrompt": true,
        "icon": "$(exclude)",
        "modelDescription": "This tool modifies the SonarQube for IDE configuration to exclude files matching a given glob pattern from analysis.",
        "tags": [
          "sonarqube",
          "static-analysis",
          "file-exclusion",
          "linter"
        ],
        "inputSchema": {
          "type": "object",
          "properties": {
            "globPattern": {
              "type": "string",
              "description": "Oracle glob pattern to exclude files or folders from analysis. For example, `**/test/**` to exclude all files in the test folder."
            }
          }
        }
      },
      {
        "name": "sonarqube_setup_connected_mode",
        "displayName": "SonarQube: Set up Connected Mode",
        "toolReferenceName": "sonarqube_setUpConnectedMode",
        "canBeReferencedInPrompt": true,
        "icon": "$(link)",
        "modelDescription": "This tool guides the user through the process of setting up Connected Mode in SonarQube for IDE. It provides instructions and prompts and runs necessary commands to help the user connect their IDE to a SonarQube Server or Cloud.",
        "tags": [
          "sonarqube",
          "sonarqube-connected-mode",
          "sonarcloud",
          "linter",
          "security-analysis"
        ],
        "inputSchema": {
          "type": "object",
          "properties": {
            "workspaceFolder": {
              "type": "string",
              "description": "Path to the workspace folder in VS Code for which the user wants to set up Connected Mode. If only one workspace folder is open, it will be used by default."
            },
            "isSonarQubeCloud": {
              "type": "boolean",
              "description": "Indicates whether the user wants to connect to SonarQube Cloud. If true, the user will be prompted for the organization key. If false, the user will be prompted for the server URL of their SonarQube Server."
            },
            "serverUrl": {
              "type": "string",
              "description": "URL of the SonarQube Server instance to connect to. Required if user wants to connect to a SonarQube Server. Example: `https://sonarqube.example.com`."
            },
            "organizationKey": {
              "type": "string",
              "description": "Key of the SonarQube Cloud organization to connect to. Required if user wants to connect to a SonarQube Cloud. Example: `my-organization`."
            },
            "projectKey": {
              "type": "string",
              "description": "Key of the SonarQube Server or Cloud project to bind to the workspace folder. This is used to set up the project binding in Connected Mode."
            }
          }
        }
      },
      {
        "name": "sonarqube_analyze_file",
        "displayName": "SonarQube: Analyze File",
        "toolReferenceName": "sonarqube_analyzeFile",
        "canBeReferencedInPrompt": true,
        "modelDescription": "This tool opens the requested file and runs SonarQube analysis on it. Detected code quality and security issues will be reported in the Problems view of the IDE. It can be used to analyze any file including those that are not part of a workspace or those that are excluded from the analysis. Do not call this method to analyze Jupyter Notebook.",
        "icon": "$(play)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "filePath": {
              "type": "string",
              "description": "The full path to the file that should be analyzed."
            }
          }
        }
      }
    ]
  },
  "main": "./dist/extension",
  "scripts": {
    "vscode:prepublish": "node build-sonarlint/prepare.mjs && webpack --mode production",
    "compile": "tsc -p ./",
    "webpack": "webpack --mode development",
    "pretest": "webpack --mode development && tsc -p ./",
    "test": "node out/test/runTest.js",
    "test-cov": "node out/test/runTest.js --coverage",
    "prepare": "node build-sonarlint/prepare.mjs",
    "cyclonedx-run": "cyclonedx-npm",
    "deploy-all": "node build-sonarlint/deployAll.mjs",
    "deploy-universal": "node build-sonarlint/deploy.mjs",
    "package": "node build-sonarlint/package.mjs",
    "package-all": "node build-sonarlint/package-all.mjs"
  },
  "dependencies": {
    "@openpgp/web-stream-tools": "^0.1.3",
    "@sentry/node": "^8.44.0",
    "@vscode/codicons": "^0.0.36",
    "@vscode/webview-ui-toolkit": "1.0.0",
    "@xmldom/xmldom": "^0.9.6",
    "compare-versions": "4.1.3",
    "diff": "^5.1.0",
    "expand-home-dir": "0.0.3",
    "find-java-home": "1.2.2",
    "follow-redirects": "^1.15.6",
    "globby": "^14.1.0",
    "highlight.js": "^11.7.0",
    "inly": "^5.0.1",
    "luxon": "^3.2.1",
    "openpgp": "^6.1.1",
    "node-html-parser": "^6.1.5",
    "path-exists": "4.0.0",
    "properties": "1.2.1",
    "sinon": "^19.0.2",
    "supports-color": "^9.4.0",
    "tar": "^7.4.3",
    "underscore": "^1.13.6",
    "vscode-languageclient": "^9.0.1",
    "zlib": "^1.0.5"
  },
  "devDependencies": {
    "@cyclonedx/cyclonedx-npm": "2.0.0",
    "@sentry/webpack-plugin": "^2.22.7",
    "@types/chai": "^4.3.9",
    "@types/follow-redirects": "^1.14.4",
    "@types/lodash": "^4.14.194",
    "@types/luxon": "^3.2.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "^22.9.3",
    "@types/vscode": "^1.73.1",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.3.2",
    "chai": "^4.3.10",
    "crypto": "^0.0.3",
    "dateformat": "^2.0.0",
    "del": "^2.2.2",
    "expect.js": "^0.3.1",
    "fancy-log": "1.3.3",
    "fs-extra": "^11.1.1",
    "glob": "^8.0.3",
    "istanbul-lib-coverage": "^3.2.2",
    "istanbul-lib-instrument": "^6.0.3",
    "istanbul-lib-report": "^3.0.1",
    "istanbul-lib-source-maps": "^5.0.6",
    "istanbul-reports": "^3.1.7",
    "map-stream": "^0.1.0",
    "mocha": "^11.0.1",
    "mocha-multi-reporters": "^1.5.1",
    "prettier": "2.0.5",
    "sonarqube-scanner": "^4.3.0",
    "stream": "^0.0.2",
    "through2": "^2.0.5",
    "ts-loader": "^9.5.2",
    "typescript": "^4.9.5",
    "unzipper": "^0.12.3",
    "vinyl": "^2.2.1",
    "webpack": "^5.94.0",
    "webpack-cli": "^5.1.4"
  },
  "jarDependencies": [
    {
      "groupId": "org.sonarsource.sonarlint.ls",
      "artifactId": "sonarlint-language-server",
      "version": "3.25.0.76263",
      "output": "server/sonarlint-ls.jar"
    },
    {
      "groupId": "org.sonarsource.go",
      "artifactId": "sonar-go-plugin",
      "version": "1.24.0.3049",
      "output": "analyzers/sonargo.jar"
    },
    {
      "groupId": "org.sonarsource.javascript",
      "artifactId": "sonar-javascript-plugin",
      "version": "10.24.0.33043",
      "output": "analyzers/sonarjs.jar"
    },
    {
      "groupId": "org.sonarsource.java",
      "artifactId": "sonar-java-plugin",
      "version": "8.15.0.39343",
      "output": "analyzers/sonarjava.jar"
    },
    {
      "groupId": "org.sonarsource.java",
      "artifactId": "sonar-java-symbolic-execution-plugin",
      "version": "8.15.0.39343",
      "output": "analyzers/sonarjavasymbolicexecution.jar"
    },
    {
      "groupId": "org.sonarsource.php",
      "artifactId": "sonar-php-plugin",
      "version": "3.46.0.13151",
      "output": "analyzers/sonarphp.jar"
    },
    {
      "groupId": "org.sonarsource.python",
      "artifactId": "sonar-python-plugin",
      "version": "5.5.0.23291",
      "output": "analyzers/sonarpython.jar"
    },
    {
      "groupId": "org.sonarsource.html",
      "artifactId": "sonar-html-plugin",
      "version": "3.19.0.5695",
      "output": "analyzers/sonarhtml.jar"
    },
    {
      "groupId": "org.sonarsource.xml",
      "artifactId": "sonar-xml-plugin",
      "version": "2.13.0.5938",
      "output": "analyzers/sonarxml.jar"
    },
    {
      "groupId": "org.sonarsource.text",
      "artifactId": "sonar-text-plugin",
      "version": "2.24.0.6480",
      "output": "analyzers/sonartext.jar"
    },
    {
      "groupId": "com.sonarsource.cpp",
      "artifactId": "sonar-cfamily-plugin",
      "version": "6.68.0.85760",
      "output": "analyzers/sonarcfamily.jar.asc",
      "requiresCredentials": true,
      "signatureOnly": true
    },
    {
      "groupId": "org.sonarsource.iac",
      "artifactId": "sonar-iac-plugin",
      "version": "1.47.0.15287",
      "output": "analyzers/sonariac.jar"
    },
    {
      "groupId": "org.sonarsource.sonarlint.omnisharp",
      "artifactId": "sonarlint-omnisharp-plugin",
      "version": "1.32.0.100405",
      "output": "analyzers/sonarlintomnisharp.jar",
      "requiresCredentials": true
    },
    {
      "groupId": "org.sonarsource.dotnet",
      "artifactId": "sonar-csharp-plugin",
      "version": "10.12.0.118525",
      "output": "analyzers/sonarcsharp.jar",
      "requiresCredentials": true
    },
    {
      "groupId": "com.sonarsource.dotnet",
      "artifactId": "sonar-csharp-enterprise-plugin",
      "version": "10.12.0.118525",
      "output": "analyzers/csharpenterprise.jar",
      "requiresCredentials": true
    }
  ],
  "prettier": {
    "jsxBracketSameLine": true,
    "printWidth": 120,
    "singleQuote": true,
    "tabWidth": 2,
    "useTabs": false,
    "arrowParens": "avoid",
    "trailingComma": "none",
    "bracketSpacing": true
  }
}
