{
  "name": "sonarlint-vscode",
  "displayName": "SonarQube for IDE",
  "description": "Linter to detect & fix coding issues locally in JS/TS, Python, PHP, Java, C, C++, C#, Go, IaC. Use with SonarQube (Server, Cloud) for optimal team performance.",
  "version": "4.13.0-SNAPSHOT",
  "icon": "images/sonarqube_for_ide_128px.png",
  "publisher": "SonarSource",
  "homepage": "https://www.sonarsource.com/products/sonarlint/",
  "repository": {
    "type": "git",
    "url": "https://github.com/SonarSource/sonarlint-vscode.git"
  },
  "bugs": {
    "url": "https://community.sonarsource.com/c/sl/vs-code/36"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "engines": {
    "vscode": "^1.73.0"
  },
  "categories": [
    "Linters"
  ],
  "keywords": [
    "IaC",
    "Code Quality",
    "Go",
    "C++",
    "Java",
    "JavaScript",
    "PHP",
    "Python",
    "TypeScript",
    "Code Analysis"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "capabilities": {
    "virtualWorkspaces": false
  },
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "SonarLint",
      "properties": {
        "sonarlint.rules": {
          "order": 1,
          "type": "object",
          "scope": "application",
          "default": {},
          "markdownDescription": "Customize applied rule set. This property contains a list of rules whose activation level or parameter values differ from the one provided by default. In [Connected Mode](command:SonarLint.HelpAndFeedbackLinkClicked?%22connectedModeDocs%22), this configuration is overridden by the projects's Quality Profile, as configured on server side and can be **shared among contributors**. See [SonarLint Rules](command:SonarLint.AllRules.focus) view for the list of **locally** available rules.\n\nExample:\n\n    \"sonarlint.rules\": {\n        \"javascript:S1481\": {\n            \"level\": \"off\",\n         },\n        \"javascript:S103\": {\n            \"level\": \"on\",\n            \"parameters\": {\n                \"maximumLineLength\": \"120\"\n            }\n        }\n    }\n",
          "patternProperties": {
            "^[^:]+:[^:]+$": {
              "type": "object",
              "markdownDescription": "Property names are rule keys in the form: `repo:key`",
              "properties": {
                "level": {
                  "type": "string",
                  "enum": [
                    "off",
                    "on"
                  ],
                  "markdownDescription": "When set to `off`, disable the rule. When set to `on`, enable the rule."
                },
                "parameters": {
                  "type": "object",
                  "markdownDescription": "Rule parameters. See rule description for accepted parameters. E.g `{ \"intParam\": \"123\" }`."
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "sonarlint.connectedMode.servers": {
          "deprecationMessage": "The setting is deprecated. Use `sonarlint.connectedMode.connections.sonarqube` or `sonarlint.connectedMode.connections.sonarcloud` instead.",
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Configure one or more connection(s) to SonarQube (Server, Cloud). For security reasons, the token should not be stored in SCM with workspace settings. The `serverId` can be any identifier and will be referenced in `#sonarlint.connectedMode.project#`.\n\nExample for SonarQube Cloud:\n\n    \"sonarlint.connectedMode.servers\": [\n      {\n        \"serverId\": \"my_orga_in_sonarcloud.io\",\n        \"serverUrl\": \"https://sonarcloud.io\",\n        \"organizationKey\": \"my_organization\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]\n\nExample for SonarQube Server:\n\n    \"sonarlint.connectedMode.servers\": [\n      {\n        \"serverId\": \"my_sonarqube\",\n        \"serverUrl\": \"https://sonar.mycompany.com\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]",
          "items": {
            "properties": {
              "serverId": {
                "type": "string",
                "description": "A unique identifier for this server connection. Will be referenced from `#sonarlint.connectedMode.project#`"
              },
              "serverUrl": {
                "type": "string",
                "description": "URL of the server. Use https://sonarcloud.io for SonarQube Cloud."
              },
              "token": {
                "type": "string",
                "description": "Token generated from My Account>Security in SonarQube (Server, Cloud)"
              },
              "organizationKey": {
                "type": "string",
                "description": "Only used for SonarQube Cloud"
              }
            },
            "additionalProperties": false
          }
        },
        "sonarlint.connectedMode.connections.sonarqube": {
          "order": 2,
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Connect SonarQube for VS Code to SonarQube Server to apply the same Clean Code standards as your team. Analyze more languages, detect more issues **on the whole project**, receive notifications about the quality gate status, and more. Quality Profiles and file exclusion settings defined on the server are shared between all connected users. Please find the documentation [here](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/team-features/connected-mode/)",
          "items": {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "A unique identifier for this connection to be used as a reference in `#sonarlint.connectedMode.project#`. Only needed if you plan to use multiple connections to SonarQube (Server, Cloud)."
              },
              "serverUrl": {
                "type": "string",
                "description": "URL of the SonarQube Server."
              },
              "token": {
                "type": "string",
                "description": "Token generated from 'My Account>Security' in SonarQube Server"
              },
              "disableNotifications": {
                "type": "boolean",
                "description": "SonarQube for VS Code will show notifications for bound projects when there are new issues assigned to you, or when the quality gate status changed. Set to false to disable all notifications for projects bound to this connection."
              }
            },
            "additionalProperties": false,
            "required": [
              "serverUrl"
            ],
            "examples": [
              {
                "serverUrl": "https://<replace_with_your_sonarqube_server_url>"
              },
              {
                "connectionId": "MyCompanySonarQube",
                "serverUrl": "https://<replace_with_your_sonarqube_server_url>",
                "disableNotifications": false
              }
            ]
          }
        },
        "sonarlint.connectedMode.connections.sonarcloud": {
          "order": 3,
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Connect SonarQube for VS Code to SonarQube Cloud to apply the same Clean Code standards as your team. Analyze more languages, detect more issues **on the whole project**, receive notifications about the quality gate status, and more. Quality Profiles and file exclusion settings defined on the server are shared between all connected users. Please find the documentation [here](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/team-features/connected-mode/)",
          "items": {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "A unique identifier for this connection to be used as a reference in `#sonarlint.connectedMode.project#`. Only needed if you plan to use multiple connections to SonarQube (Server, Cloud)."
              },
              "organizationKey": {
                "type": "string",
                "description": "A SonarQube Cloud organization key. If you want to bind different projects that are in different organizations, simply declare multiple connections."
              },
              "token": {
                "type": "string",
                "description": "Token generated from 'My Account>Security' in SonarQube Cloud"
              },
              "disableNotifications": {
                "type": "boolean",
                "description": "SonarQube for VS Code will show notifications for bound projects when there are new issues assigned to you, or when the quality gate status changed. Set to false to disable all notifications for projects bound to this connection."
              }
            },
            "additionalProperties": false,
            "required": [
              "organizationKey"
            ],
            "examples": [
              {
                "organizationKey": "<replace_with_your_sonarqube_cloud_organization_key>"
              },
              {
                "connectionId": "MyOrganization",
                "organizationKey": "<replace_with_your_sonarqube_cloud_organization_key>",
                "disableNotifications": false
              }
            ]
          }
        },
        "sonarlint.connectedMode.project": {
          "order": 4,
          "markdownDescription": "Bind the current workspace folder to a [SonarQube Server](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarQubeProductPage%22) or [SonarQube Cloud](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarCloudProductPage%22) project. Requires connection details to be defined in the setting `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`.\n\nBinding a workspace folder to a server project allows SonarQube for VS Code to match, as much as possible, the same rules and settings as found on the server, and hence share the analysis configuration with other contributors.\n\nExample:\n\n    \"sonarlint.connectedMode.project\": {\n      \"projectKey\": \"my_project\",\n      \"connectionId\":\"my_connection_id\"\n    }\n\n",
          "examples": [
            {
              "projectKey": "<replace_with_server_project_key>"
            },
            {
              "connectionId": "<replace_with_connection_id>",
              "projectKey": "<replace_with_server_project_key>"
            }
          ],
          "default": {},
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "serverId": {
                  "type": "string",
                  "description": "Identifier of the server connection declared in `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`"
                },
                "projectKey": {
                  "type": "string",
                  "description": "Key of the project in SonarQube (Server, Cloud)"
                }
              },
              "additionalProperties": false,
              "required": [
                "serverId",
                "projectKey"
              ],
              "deprecationMessage": "Replace `serverId` attribute by `connectionId`."
            },
            {
              "type": "object",
              "properties": {
                "connectionId": {
                  "type": "string",
                  "description": "Identifier of the server connection declared in `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`"
                },
                "projectKey": {
                  "type": "string",
                  "description": "Key of the project in SonarQube Server or SonarQube Cloud (can be found on project homepage)"
                }
              },
              "additionalProperties": false,
              "required": [
                "projectKey"
              ]
            }
          ],
          "scope": "resource"
        },
        "sonarlint.pathToNodeExecutable": {
          "order": 10,
          "type": "string",
          "markdownDescription": "Path to a Node.js executable (18.18 or more recent) used to analyze JavaScript and TypeScript code. \nOn Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\NodeJS\\\\20-lts\\\\bin\\\\node.exe`",
          "scope": "machine"
        },
        "sonarlint.pathToCompileCommands": {
          "order": 11,
          "type": "string",
          "markdownDescription": "Path to the active compilation database, e.g. `C:\\\\Repos\\\\MyProject\\\\compile_commands.json`",
          "scope": "resource"
        },
        "sonarlint.testFilePattern": {
          "order": 12,
          "type": "string",
          "default": "",
          "markdownDescription": "Files whose name match this [glob pattern](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) are considered as test files by analyzers. Most rules are *not* evaluated on test files.\n\nIn [Connected Mode](command:SonarLint.HelpAndFeedbackLinkClicked?%22connectedModeDocs%22), this setting is configured **on the server-side** and shared among all contributors.\n\nExample: `**/test/**,**/*test*,**/*Test*`",
          "scope": "resource"
        },
        "sonarlint.analysisExcludesStandalone": {
          "order": 13,
          "type": "string",
          "default": "",
          "markdownDescription": "Files whose name match this [glob pattern](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) will not be processed by analyzers. In [Connected Mode](command:SonarLint.HelpAndFeedbackLinkClicked?%22connectedModeDocs%22) with SonarQube Server or SonarQube Cloud, this property will be ignored and the server's exclusion settings will be applied. No rules are evaluated on excluded files. Example: `**/lib/**,**/*generated*`",
          "scope": "resource"
        },
        "sonarlint.ls.javaHome": {
          "order": 20,
          "type": "string",
          "markdownDescription": "Path to a Java Runtime Environment (17 or more recent) used to launch the SonarQube for VS Code Language Server.\n* On Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\Java\\\\jdk-17` \n* On macOS, this path should include the `/Contents/Home` directory, e.g `/Library/Java/JavaVirtualMachines/corretto-17.0.5/Contents/Home`",
          "scope": "machine"
        },
        "sonarlint.ls.vmargs": {
          "order": 21,
          "type": "string",
          "markdownDescription": "Extra JVM arguments used to launch the SonarLint Language Server. e.g. `-Xmx1024m`",
          "scope": "machine"
        },
        "sonarlint.output.showVerboseLogs": {
          "order": 90,
          "type": "boolean",
          "default": false,
          "description": "Enable verbose log level in the SonarQube for IDE output.",
          "scope": "window"
        },
        "sonarlint.output.showAnalyzerLogs": {
          "order": 91,
          "type": "boolean",
          "default": false,
          "description": "Show analyzer's logs in the SonarQube for IDE output.",
          "scope": "window"
        },
        "sonarlint.analyzerProperties": {
          "order": 92,
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "type": "string",
              "markdownDescription": "One entry value"
            },
            "additionalProperties": false
          },
          "markdownDescription": "Extra properties that could be passed to the code analyzers. Only for advanced use cases.",
          "scope": "resource"
        },
        "sonarlint.trace.server": {
          "order": 98,
          "default": "off",
          "description": "Traces the communication between VS Code and the SonarLint language server.",
          "scope": "window",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "off",
                "messages",
                "verbose"
              ],
              "default": "off"
            },
            {
              "type": "object",
              "properties": {
                "verbosity": {
                  "type": "string",
                  "enum": [
                    "off",
                    "messages",
                    "verbose"
                  ],
                  "default": "off"
                },
                "format": {
                  "type": "string",
                  "enum": [
                    "text",
                    "json"
                  ],
                  "default": "text"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "sonarlint.disableTelemetry": {
          "order": 99,
          "type": "boolean",
          "default": false,
          "markdownDescription": "Disable sending anonymous usage statistics to SonarSource. Click [here](https://github.com/SonarSource/sonarlint-vscode/blob/master/telemetry-sample.md) to see a sample of the data that are collected.",
          "scope": "window"
        },
        "sonarlint.focusOnNewCode": {
          "order": 100,
          "type": "boolean",
          "default": false,
          "markdownDescription": "Highlight issues in new code.\n\nFocusing on new code helps you practice [Clean as You Code](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/clean-as-you-code-in-the-ide/).\n\nIn [Connected Mode](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/team-features/connected-mode/) you benefit from a more accurate new code definition based on your SonarQube (Server, Cloud) settings.\n\nWithout Connected Mode (in standalone mode), any code added or changed in the **last 30 days** is considered new code.",
          "scope": "window"
        }
      }
    },
    "commands": [
      {
        "command": "SonarLint.ShowSonarLintOutput",
        "title": "Show SonarQube for IDE Output",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.ReopenLocalIssues",
        "title": "Reopen Local Issues for current file",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.AnalyseOpenFile",
        "title": "Analyse current file ignoring excludes",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.ConfigureCompilationDatabase",
        "title": "Configure the compilation database for C and C++ analysis",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.AutoBindWorkspaceFolders",
        "title": "Bind all workspace folders to SonarQube (Server, Cloud)",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.DeactivateRule",
        "title": "Deactivate",
        "icon": "$(x)",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ActivateRule",
        "title": "Activate",
        "icon": "$(check)",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ResetDefaultRule",
        "title": "Reset",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowAllRules",
        "title": "All",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowActiveRules",
        "title": "Active",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowInactiveRules",
        "title": "Inactive",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ScanForHotspotsInFolder",
        "title": "In Whole Folder",
        "enablement": "view == SonarLint.SecurityHotspots && SonarLint.Hotspots.ShowMode == 'OpenFiles'"
      },
      {
        "command": "SonarLint.ShowHotspotsInOpenFiles",
        "title": "In Open Files",
        "enablement": "view == SonarLint.SecurityHotspots && SonarLint.Hotspots.ShowMode == 'Folder'"
      },
      {
        "command": "SonarLint.FindRuleByKey",
        "title": "Find Rule By Key",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ClearLocations",
        "title": "Clear",
        "enablement": "view == SonarLint.IssueLocations || view == SonarLint.SecurityHotspots"
      },
      {
        "command": "SonarLint.ClearHotspotLocations",
        "title": "Clear Highlighting",
        "enablement": "view == SonarLint.SecurityHotspots"
      },
      {
        "command": "SonarLint.ConnectToSonarQube",
        "title": "Connect to SonarQube Server",
        "category": "SonarQube",
        "icon": "$(plus)"
      },
      {
        "command": "SonarLint.ConnectToSonarCloud",
        "title": "Connect to SonarQube Cloud",
        "category": "SonarQube",
        "icon": "$(plus)"
      },
      {
        "command": "SonarLint.EditSonarQubeConnection",
        "title": "Edit SonarQube Server Connection",
        "category": "SonarQube",
        "icon": "$(pencil)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.EditSonarCloudConnection",
        "title": "Edit SonarQube Cloud Connection",
        "category": "SonarQube",
        "icon": "$(pencil)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.AddProjectBinding",
        "title": "Add Project Binding",
        "category": "SonarQube",
        "icon": "$(plus)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.RemoveConnection",
        "title": "Remove Connection",
        "category": "SonarQube",
        "icon": "$(trash)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.EditProjectBinding",
        "title": "Edit Project Binding",
        "category": "SonarQube",
        "icon": "$(pencil)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.RemoveProjectBinding",
        "title": "Remove Project Binding",
        "category": "SonarQube",
        "icon": "$(trash)",
        "enablement": "view == SonarLint.ConnectedMode"
      },
      {
        "command": "SonarLint.OpenHotspotOnServer",
        "title": "Review on Server",
        "category": "SonarQube",
        "enablement": "view == SonarLint.SecurityHotspots && viewItem == knownHotspotItem"
      },
      {
        "command": "SonarLint.ShowHotspotRuleDescription",
        "title": "Show Rule Description",
        "category": "SonarQube",
        "enablement": "view == SonarLint.SecurityHotspots && viewItem == newHotspotItem"
      },
      {
        "command": "SonarLint.ShowHotspotDetails",
        "title": "Show Hotspot Details",
        "category": "SonarQube",
        "enablement": "view == SonarLint.SecurityHotspots && (viewItem == knownHotspotItem || viewItem == remoteHotspotItem)"
      },
      {
        "command": "SonarLint.HideHotspot",
        "title": "Hide Security Hotspot",
        "category": "SonarQube",
        "enablement": "view == SonarLint.SecurityHotspots && viewItem == remoteHotspotItem"
      },
      {
        "command": "SonarLint.ChangeHotspotStatus",
        "title": "Change Status",
        "category": "SonarQube",
        "enablement": "view == SonarLint.SecurityHotspots && viewItem == knownHotspotItem"
      },
      {
        "command": "SonarLint.HelpAndFeedbackLinkClicked",
        "title": "Share feedback",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.EnableVerboseLogs",
        "title": "Enable Verbose Logging",
        "category": "SonarQube"
      },
      {
        "command": "SonarLint.ShareConnectedModeConfiguration",
        "title": "Share Connected Mode Configuration",
        "category": "SonarQube",
        "icon": "$(export)",
        "enablement": "view == SonarLint.ConnectedMode"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "icon": "images/sonarqube_for_ide.svg",
          "id": "SonarLint",
          "title": "SonarQube"
        }
      ]
    },
    "views": {
      "explorer": [
        {
          "id": "SonarLint.IssueLocations",
          "name": "SonarQube Issue Locations"
        }
      ],
      "SonarLint": [
        {
          "id": "SonarLint.AllRules",
          "name": "Rules"
        },
        {
          "id": "SonarLint.ConnectedMode",
          "name": "Connected Mode"
        },
        {
          "id": "SonarLint.SecurityHotspots",
          "name": "Security Hotspots",
          "visibility": "collapsed"
        },
        {
          "id": "SonarLint.HelpAndFeedback",
          "name": "Help and Feedback"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "SonarLint.IssueLocations",
        "contents": "No locations to show.\nUse \"Show all locations\" code action from a SonarQube for VS Code issue."
      },
      {
        "view": "SonarLint.ConnectedMode",
        "contents": "[Connected Mode](command:SonarLint.HelpAndFeedbackLinkClicked?%22connectedModeDocs%22) links SonarQube for VS Code to SonarQube (Server, Cloud) to apply the same Clean Code standards as your team.\n\n[Add SonarQube Server Connection](command:SonarLint.ConnectToSonarQube)\n[Add SonarQube Cloud Connection](command:SonarLint.ConnectToSonarCloud)\n\nAnalyze more languages, detect more issues on the whole project, receive notifications about the quality gate status, and more.\n\nQuality Profiles and file exclusion settings defined on the server are shared between all connected users.\n\nDiscover which option is the best for your team [here](command:SonarLint.HelpAndFeedbackLinkClicked?%22compareServerProducts%22)."
      },
      {
        "view": "SonarLint.SecurityHotspots",
        "contents": "Please ensure a connection to [SonarQube Server](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarQubeProductPage%22) 9.9+ or [SonarQube Cloud](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarCloudProductPage%22) is set up. Detected Security Hotspots will be displayed here. [Learn More](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/using-sonarlint/security-hotspots).\n Using the In Whole Folder feature may consume excessive resources depending on the size of your project. Please check the [documentation](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/using-sonarlint/security-hotspots/#reporting-security-hotspots-in-the-whole-folder) for recommendations to minimize the impact of a full project analysis."
      }
    ],
    "walkthroughs": [
      {
        "id": "SonarLint.walkthrough",
        "title": "Welcome to SonarQube for VS Code!",
        "description": "Your Clean Code journey starts here.",
        "steps": [
          {
            "id": "SonarLint.inAction",
            "title": "$(rocket) New to SonarQube for VS Code? See it in action",
            "description": "SonarQube for VS Code supports analysis of 15+ languages including JS/TS, Java, Python, CSS/HTML, C, C++, C#, and [more](https://docs.sonarsource.com/sonarqube-for-ide/vs-code/using-sonarlint/rules). SonarQube for VS Code detects issues in all files **open** in the editor. For project-level analysis, check out [SonarQube Cloud](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarCloudProductPage%22).\n\nThe best way to get started is to see it in action!\n[Open Sample File](command:SonarLint.OpenSample)",
            "media": {
              "markdown": "walkthrough/empty.md"
            },
            "completionEvents": [
              "onView:workbench.panel.markers.view"
            ]
          },
          {
            "id": "SonarLint.learnMoreAboutIssues",
            "title": "$(book) Learn more about issues",
            "description": "Check the [Problems view](command:workbench.panel.markers.view.focus): SonarQube for VS Code has found something $(warning).\nRight-click on the issue found by SonarQube for VS Code.\nOpen the rule description: SonarQube for VS Code clearly explains why this is an issue.\nFor certain rules and issues, SonarQube for VS Code will suggest available Quick Fixes.",
            "media": {
              "markdown": "walkthrough/empty.md"
            },
            "completionEvents": [
              "onCommand:SonarLint.OpenStandaloneRuleDesc"
            ]
          },
          {
            "id": "SonarLint.connectedModeIntro",
            "title": "$(link) Connect with your team",
            "description": "Apply the same Clean Code standards as your team by using SonarQube for VS Code in Connected Mode with [SonarQube Server](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarQubeProductPage%22) or [SonarQube Cloud](command:SonarLint.HelpAndFeedbackLinkClicked?%22sonarCloudProductPage%22).\n**Already using SonarQube Server or SonarQube Cloud?** Set up connection in the CONNECTED MODE view.\n[Set up Connection](command:SonarLint.ConnectedMode.focus)",
            "media": {
              "markdown": "walkthrough/empty.md"
            },
            "completionEvents": [
              "onView:SonarLint.ConnectedMode"
            ]
          },
          {
            "id": "SonarLint.reachOut",
            "title": "$(comment-discussion) Share feedback or ask for help",
            "description": "You suspect your code has issues but don't see any problems detected by SonarQube for VS Code? [Enable verbose logging](command:SonarLint.EnableVerboseLogs) and check the output in the SonarQube for IDE Output window\n[Check Output](command:SonarLint.ShowSonarLintOutput)\n\nYou'd like to learn more about SonarQube for VS Code, or give us feedback? Check out the [Help and Feedback view](command:SonarLint.HelpAndFeedback.focus)\n\n",
            "media": {
              "markdown": "walkthrough/empty.md"
            },
            "completionEvents": [
              "onView:SonarLint.HelpAndFeedback"
            ]
          }
        ]
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "SonarLint.ShowAllRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ShowActiveRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ShowInactiveRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ScanForHotspotsInFolder",
          "when": "view == SonarLint.SecurityHotspots",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ShowHotspotsInOpenFiles",
          "when": "view == SonarLint.SecurityHotspots",
          "group": "navigation"
        },
        {
          "command": "SonarLint.FindRuleByKey",
          "when": "view == SonarLint.AllRules"
        },
        {
          "command": "SonarLint.ClearLocations",
          "when": "view == SonarLint.IssueLocations",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ConnectToSonarQube",
          "when": "view == SonarLint.ConnectedMode",
          "group": "inline"
        },
        {
          "command": "SonarLint.ConnectToSonarCloud",
          "when": "view == SonarLint.ConnectedMode",
          "group": "inline"
        }
      ],
      "view/item/context": [
        {
          "command": "SonarLint.DeactivateRule",
          "when": "view == SonarLint.AllRules && viewItem == rule-on",
          "group": "inline"
        },
        {
          "command": "SonarLint.ActivateRule",
          "when": "view == SonarLint.AllRules && viewItem == rule-off",
          "group": "inline"
        },
        {
          "command": "SonarLint.ConnectToSonarQube",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarQubeGroup",
          "group": "inline"
        },
        {
          "command": "SonarLint.ConnectToSonarCloud",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarCloudGroup",
          "group": "inline"
        },
        {
          "command": "SonarLint.EditSonarQubeConnection",
          "title": "Edit",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarqubeConnection",
          "group": "inline"
        },
        {
          "command": "SonarLint.EditSonarCloudConnection",
          "title": "Edit",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarcloudConnection",
          "group": "inline"
        },
        {
          "command": "SonarLint.AddProjectBinding",
          "title": "Add Project Binding",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarcloudConnection || viewItem == sonarqubeConnection",
          "group": "inline"
        },
        {
          "command": "SonarLint.RemoveConnection",
          "title": "Remove",
          "when": "view == SonarLint.ConnectedMode && viewItem == sonarcloudConnection || viewItem == sonarqubeConnection",
          "group": "inline"
        },
        {
          "command": "SonarLint.EditProjectBinding",
          "title": "Edit",
          "when": "view == SonarLint.ConnectedMode && viewItem == workspaceFolder",
          "group": "inline"
        },
        {
          "command": "SonarLint.RemoveProjectBinding",
          "title": "Remove",
          "when": "view == SonarLint.ConnectedMode && viewItem == workspaceFolder",
          "group": "inline"
        },
        {
          "command": "SonarLint.ShareConnectedModeConfiguration",
          "title": "Share",
          "when": "view == SonarLint.ConnectedMode && viewItem == workspaceFolder",
          "group": "inline"
        },
        {
          "command": "SonarLint.ShowHotspotRuleDescription",
          "title": "Show Rule Description",
          "when": "view == SonarLint.SecurityHotspots && viewItem == newHotspotItem"
        },
        {
          "command": "SonarLint.ShowHotspotDetails",
          "title": "Show Hotspot Details",
          "when": "view == SonarLint.SecurityHotspots && (viewItem == knownHotspotItem || viewItem == remoteHotspotItem)"
        },
        {
          "command": "SonarLint.ChangeHotspotStatus",
          "title": "Change Status",
          "when": "view == SonarLint.SecurityHotspots && viewItem == knownHotspotItem"
        },
        {
          "command": "SonarLint.OpenHotspotOnServer",
          "title": "Review on Server",
          "when": "view == SonarLint.SecurityHotspots && viewItem == knownHotspotItem"
        },
        {
          "command": "SonarLint.ClearHotspotLocations",
          "title": "Clear Highlighting",
          "when": "view == SonarLint.SecurityHotspots && viewItem == newHotspotItem || viewItem == knownHotspotItem || viewItem == remoteHotspotItem"
        },
        {
          "command": "SonarLint.HideHotspot",
          "title": "Hide Security Hotspot",
          "category": "SonarQube",
          "when": "view == SonarLint.SecurityHotspots && viewItem == remoteHotspotItem"
        }
      ]
    },
    "colors": [
      {
        "id": "sonarlint.locations.background",
        "description": "Background color for highlighted secondary locations of SonarLint issues",
        "defaults": {
          "light": "#f2dede",
          "dark": "#523e3e",
          "highContrast": "#523e3e"
        }
      },
      {
        "id": "sonarlint.locations.indexText",
        "description": "Text color for secondary location index of SonarLint issues",
        "defaults": {
          "light": "#fff",
          "dark": "#ccc",
          "highContrast": "#ccc"
        }
      },
      {
        "id": "sonarlint.locations.indexBackground",
        "description": "Background color for secondary location index of SonarLint issues",
        "defaults": {
          "light": "#d18582",
          "dark": "#74232f",
          "highContrast": "#74232f"
        }
      },
      {
        "id": "sonarlint.locations.indexSelectedText",
        "description": "Text color for active secondary location index of SonarLint issues",
        "defaults": {
          "light": "#fff",
          "dark": "#fff",
          "highContrast": "#fff"
        }
      },
      {
        "id": "sonarlint.locations.indexSelectedBackground",
        "description": "Background color for active secondary location index of SonarLint issues",
        "defaults": {
          "light": "#a4030f",
          "dark": "#b4131f",
          "highContrast": "#b4131f"
        }
      }
    ],
    "icons": {
      "security-hotspot": {
        "description": "Security Hotspot",
        "default": {
          "fontPath": "icons/sonarlint.woff",
          "fontCharacter": "H"
        }
      }
    }
  },
  "main": "./dist/extension",
  "files": [
    "server/sonarlint-ls.jar",
    "analyzers"
  ],
  "scripts": {
    "vscode:prepublish": "node scripts/prepare.mjs && webpack --mode production",
    "compile": "tsc -p ./",
    "webpack": "webpack --mode development",
    "pretest": "webpack --mode development && tsc -p ./",
    "test": "node out/test/runTest.js",
    "test-cov": "node out/test/runTest.js --coverage",
    "prepare": "node scripts/prepare.mjs",
    "cyclonedx-run": "cyclonedx-npm",
    "cyclonedx": "node build-sonarlint/sbomGeneration.mjs",
    "deploy-all": "node build-sonarlint/deployAll.mjs",
    "deploy-universal": "node build-sonarlint/deploy.mjs",
    "package": "node build-sonarlint/package.mjs",
    "package-all": "node build-sonarlint/package-all.mjs"
  },
  "dependencies": {
    "@vscode/webview-ui-toolkit": "1.0.0",
    "compare-versions": "4.1.3",
    "diff": "^5.1.0",
    "expand-home-dir": "0.0.3",
    "find-java-home": "1.2.2",
    "follow-redirects": "^1.15.6",
    "globby": "^14.0.2",
    "highlight.js": "^11.7.0",
    "inly": "4.0.8",
    "luxon": "^3.2.1",
    "node-fetch": "^2.7.0",
    "node-html-parser": "^6.1.5",
    "path-exists": "4.0.0",
    "properties": "1.2.1",
    "sinon": "^19.0.2",
    "supports-color": "^9.4.0",
    "tar": "^7.2.0",
    "underscore": "^1.13.6",
    "vscode-languageclient": "^8.0.2",
    "xmldom": "^0.6.0",
    "zlib": "^1.0.5"
  },
  "devDependencies": {
    "@cyclonedx/bom": "^4.1.0",
    "@types/chai": "^4.3.9",
    "@types/follow-redirects": "^1.14.4",
    "@types/glob": "8.0.0",
    "@types/lodash": "^4.14.194",
    "@types/luxon": "^3.2.0",
    "@types/mocha": "10.0.0",
    "@types/node": "^10.17.17",
    "@types/vscode": "^1.73.1",
    "@vscode/test-electron": "^2.3.9",
    "@vscode/vsce": "2.21.1",
    "chai": "^4.3.10",
    "crypto": "^0.0.3",
    "dateformat": "^2.0.0",
    "del": "^2.2.2",
    "expect.js": "^0.3.1",
    "fancy-log": "1.3.3",
    "fs-extra": "^11.1.1",
    "glob": "^8.0.3",
    "istanbul-lib-coverage": "^3.2.0",
    "istanbul-lib-instrument": "^6.0.0",
    "istanbul-lib-report": "^3.0.1",
    "istanbul-lib-source-maps": "^4.0.1",
    "istanbul-reports": "^3.1.6",
    "map-stream": "^0.1.0",
    "mocha": "^10.7.3",
    "mocha-multi-reporters": "^1.5.1",
    "openpgp": "^5.11.1",
    "prettier": "2.0.5",
    "sonarqube-scanner": "^4.2.3",
    "stream": "^0.0.2",
    "through2": "^2.0.5",
    "ts-loader": "^9.5.1",
    "typescript": "^4.9.5",
    "vinyl": "^2.2.1",
    "webpack": "^5.94.0",
    "webpack-cli": "4.10.0"
  },
  "prettier": {
    "jsxBracketSameLine": true,
    "printWidth": 120,
    "singleQuote": true,
    "tabWidth": 2,
    "useTabs": false,
    "arrowParens": "avoid",
    "trailingComma": "none",
    "bracketSpacing": true
  }
}
