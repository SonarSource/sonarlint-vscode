{
  "name": "sonarlint-vscode",
  "displayName": "SonarLint",
  "description": "SonarLint is an IDE extension that helps you detect and fix quality issues as you write code in JavaScript, TypeScript, Python, Java, HTML and PHP.",
  "version": "1.22.0-SNAPSHOT",
  "icon": "images/sonarlint_wave_128px.png",
  "publisher": "SonarSource",
  "homepage": "http://www.sonarlint.org",
  "repository": {
    "type": "git",
    "url": "https://github.com/SonarSource/sonarlint-vscode.git"
  },
  "bugs": {
    "url": "https://jira.sonarsource.com/browse/SLVSCODE"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "engines": {
    "vscode": "^1.41.0"
  },
  "categories": [
    "Linters"
  ],
  "keywords": [
    "code analysis",
    "linters"
  ],
  "qna": "https://community.sonarsource.com/c/help/sl",
  "activationEvents": [
    "onLanguage:java",
    "onLanguage:javascript",
    "onLanguage:javascriptreact",
    "onLanguage:typescript",
    "onLanguage:typescriptreact",
    "onLanguage:python",
    "onLanguage:php",
    "onLanguage:vue",
    "onLanguage:html",
    "onLanguage:jsp",
    "onLanguage:apex",
    "onLanguage:plsql",
    "onLanguage:oraclesql",
    "onCommand:SonarLint.UpdateAllBindings",
    "onView:SonarLint.AllRules",
    "onView:SonarLint.IssueLocations"
  ],
  "extensionDependencies": [
    "vscode.typescript-language-features"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "SonarLint",
      "properties": {
        "sonarlint.output.showAnalyzerLogs": {
          "type": "boolean",
          "default": false,
          "description": "Show analyzer's logs in the SonarLint output.",
          "scope": "window"
        },
        "sonarlint.output.showVerboseLogs": {
          "type": "boolean",
          "default": false,
          "description": "Enable verbose log level (for both SonarLint and analyzer) in the SonarLint output.",
          "scope": "window"
        },
        "sonarlint.trace.server": {
          "default": "off",
          "description": "Traces the communication between VS Code and the SonarLint language server.",
          "scope": "window",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "off",
                "messages",
                "verbose"
              ],
              "default": "off"
            },
            {
              "type": "object",
              "properties": {
                "verbosity": {
                  "type": "string",
                  "enum": [
                    "off",
                    "messages",
                    "verbose"
                  ],
                  "default": "off"
                },
                "format": {
                  "type": "string",
                  "enum": [
                    "text",
                    "json"
                  ],
                  "default": "text"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "sonarlint.testFilePattern": {
          "type": "string",
          "default": "",
          "markdownDescription": "Files whose name match this [glob pattern](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) are considered as test files by analyzers. Most rules are *not* evaluated on test files. Example: `{**/test/**,**/*test*,**/*Test*}`",
          "scope": "resource"
        },
        "sonarlint.analyzerProperties": {
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "type": "string",
              "markdownDescription": "One entry value"
            },
            "additionalProperties": false
          },
          "markdownDescription": "Extra properties that could be passed to the code analyzers. e.g. `{\"sonar.javascript.globals\": \"xxx\"}`. See [documentation](https://redirect.sonarsource.com/doc/plugin-library.html) of each analyzers.",
          "scope": "resource"
        },
        "sonarlint.disableTelemetry": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Disable sending anonymous usage statistics to SonarSource. Click [here](https://github.com/SonarSource/sonarlint-vscode/blob/master/telemetry-sample.md) to see a sample of the data that are collected.",
          "scope": "window"
        },
        "sonarlint.rules": {
          "type": "object",
          "scope": "application",
          "default": {},
          "markdownDescription": "Customize applied rule set. This property contains a list of rules whose activation level or parameter values differ from the one provided by default. See _SonarLint Rules_ view for the full list of available rules. In connected mode, this configuration is overridden by the projects's quality profile, as configured on server side.\n\nExample:\n\n    \"sonarlint.rules\": {\n        \"javascript:1481\": {\n            \"level\": \"off\",\n        \"javascript:S103\": {\n            \"level\": \"on\",\n            \"parameters\": {\n                \"maximumLineLength\": \"120\"\n            }\n        }\n    }\n",
          "patternProperties": {
            "^[^:]+:[^:]+$": {
              "type": "object",
              "markdownDescription": "Property names are rule keys in the form: `repo:key`",
              "properties": {
                "level": {
                  "type": "string",
                  "anyOf": [
                    "off",
                    "on"
                  ],
                  "markdownDescription": "When set to `off`, disable the rule. When set to `on`, enable the rule."
                },
                "parameters": {
                  "type": "object",
                  "markdownDescription": "Rule parameters. See rule description for accepted parameters. E.g `{ \"intParam\": \"123\" }`."
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "sonarlint.ls.javaHome": {
          "type": "string",
          "markdownDescription": "Path to a Java Runtime Environment (8 or more recent) used to launch the SonarLint Language Server. \n* On Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\Java\\\\jdk1.8.0_161` \n* On macOS, this path should include the `/Contents/Home` directory, e.g `/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home`",
          "scope": "machine"
        },
        "sonarlint.ls.vmargs": {
          "type": "string",
          "markdownDescription": "Extra JVM arguments used to launch the SonarLint Language Server. e.g. `-Xmx1024m`",
          "scope": "machine"
        },
        "sonarlint.pathToNodeExecutable": {
          "type": "string",
          "markdownDescription": "Path to a Node.js executable (8 or more recent) used to analyze JavaScript and TypeScript code. \nOn Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\NodeJS\\\\12-lts\\\\bin\\\\node.exe`",
          "scope": "machine"
        },
        "sonarlint.connectedMode.servers": {
          "deprecationMessage": "The setting is deprecated. Use `sonarlint.connectedMode.connections.sonarqube` or `sonarlint.connectedMode.connections.sonarcloud` instead.",
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Configure one or more connection(s) to SonarQube/SonarCloud. For security reasons, the token should not be stored in SCM with workspace settings. The `serverId` can be any identifier and will be referenced in `#sonarlint.connectedMode.project#`.\n\nExample for SonarCloud:\n\n    \"sonarlint.connectedMode.servers\": [\n      {\n        \"serverId\": \"my_orga_in_sonarcloud.io\",\n        \"serverUrl\": \"https://sonarcloud.io\",\n        \"organizationKey\": \"my_organization\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]\n\nExample for SonarQube:\n\n    \"sonarlint.connectedMode.servers\": [\n      {\n        \"serverId\": \"my_sonarqube\",\n        \"serverUrl\": \"https://sonar.mycompany.com\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]",
          "items": {
            "properties": {
              "serverId": {
                "type": "string",
                "description": "A unique identifier for this server connection. Will be referenced from `#sonarlint.connectedMode.project#`"
              },
              "serverUrl": {
                "type": "string",
                "description": "URL of the server. Use https://sonarcloud.io for SonarCloud."
              },
              "token": {
                "type": "string",
                "description": "Token generated from My Account>Security in SonarQube/SonarCloud"
              },
              "organizationKey": {
                "type": "string",
                "description": "Only used for SonarCloud"
              }
            },
            "additionalProperties": false
          }
        },
        "sonarlint.connectedMode.connections.sonarqube": {
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Configure connection(s) to [SonarQube](https://sonarqube.org). Don't forget to also configure the project binding in `#sonarlint.connectedMode.project#`.\n\nExample:\n\n    \"sonarlint.connectedMode.connections.sonarqube\": [\n      {\n        \"serverUrl\": \"https://sonar.mycompany.com\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]\n\nSpecify a `connectionId` if you want to define multiple connections. Add `\"disableNotifications\": true` to disable notifications.",
          "examples": [
            {
              "serverUrl": "https://<myServerUrl>",
              "token": "<mySQToken>"
            },
            {
              "connectionId": "<myConnectionId>",
              "serverUrl": "https://<myServerUrl>",
              "token": "<mySQToken>"
            }
          ],
          "items": {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "A unique identifier for this connection to be used as a reference in `#sonarlint.connectedMode.project#`. Only needed if you plan to use multiple connections to SonarQube/SonarCloud."
              },
              "serverUrl": {
                "type": "string",
                "description": "URL of the server."
              },
              "token": {
                "type": "string",
                "description": "Token generated from My Account>Security in SonarQube"
              },
              "disableNotifications": {
                "type": "boolean",
                "description": "SonarLint will show notifications for bound projects when there are new issues assigned to you, or when the quality gate status changed. Set to false to disable all notifications for projects bound to this connection."
              }
            },
            "additionalProperties": false,
            "required": [
              "serverUrl",
              "token"
            ]
          }
        },
        "sonarlint.connectedMode.connections.sonarcloud": {
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Configure connection(s) to [SonarCloud](https://sonarcloud.io). Don't forget to also configure the project binding in `#sonarlint.connectedMode.project#`.\nIf you have projects in multiple SonarCloud organizations, simply declare multiple connections.\n\nExample:\n\n    \"sonarlint.connectedMode.connections.sonarcloud\": [\n      {\n        \"organizationKey\": \"myOrg\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]\n\nSpecify a `connectionId` if you want to define multiple connections. Add `\"disableNotifications\": true` to disable notifications.",
          "examples": [
            {
              "organizationKey": "<myOrgKey>",
              "token": "<mySCToken>"
            },
            {
              "connectionId": "<myConnectionId>",
              "organizationKey": "<myOrgKey>",
              "token": "<mySCToken>"
            }
          ],
          "items": {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "A unique identifier for this connection to be used as a reference in `#sonarlint.connectedMode.project#`. Only needed if you plan to use multiple connections to SonarQube/SonarCloud."
              },
              "organizationKey": {
                "type": "string",
                "description": "A SonarCloud organization key. If you want to bind different projects that are in different organizations, simply declare multiple connections."
              },
              "token": {
                "type": "string",
                "description": "Token generated from [My Account>Security](https://sonarcloud.io/account/security/) in SonarCloud"
              },
              "disableNotifications": {
                "type": "boolean",
                "description": "SonarLint will show notifications for bound projects when there are new issues assigned to you, or when the quality gate status changed. Set to false to disable all notifications for projects bound to this connection."
              }
            },
            "additionalProperties": false,
            "required": [
              "organizationKey",
              "token"
            ]
          }
        },
        "sonarlint.connectedMode.project": {
          "markdownDescription": "Bind the current workspace folder to a [SonarQube](https://sonarqube.org) or [SonarCloud](https://sonarcloud.io) project. Requires connection details to be defined in the setting `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`.\n\nBinding a workspace folder to a project allows to use the same code analyzers, rules and configuration that are defined in the server, as well as issue suppressions.\n\nExample:\n\n    \"sonarlint.connectedMode.project\": {\n      \"projectKey\": \"my_project\"\n    }\n\nSpecify the `connectionId` if you have defined multiple connections.",
          "examples": [
            {
              "projectKey": "<myProjectKey>"
            },
            {
              "connectionId": "<myConnectionId>",
              "projectKey": "<myProjectKey>"
            }
          ],
          "default": {},
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "serverId": {
                  "type": "string",
                  "description": "Identifier of the server connection declared in `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`"
                },
                "projectKey": {
                  "type": "string",
                  "description": "Key of the project in SonarQube/SonarCloud"
                }
              },
              "additionalProperties": false,
              "required": [
                "serverId",
                "projectKey"
              ],
              "deprecationMessage": "Replace `serverId` attribute by `connectionId`."
            },
            {
              "type": "object",
              "properties": {
                "connectionId": {
                  "type": "string",
                  "description": "Identifier of the server connection declared in `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`"
                },
                "projectKey": {
                  "type": "string",
                  "description": "Key of the project in SonarQube/SonarCloud (can be found on project homepage)"
                }
              },
              "additionalProperties": false,
              "required": [
                "projectKey"
              ]
            }
          ],
          "scope": "resource"
        }
      }
    },
    "commands": [
      {
        "command": "SonarLint.UpdateAllBindings",
        "title": "Update all project bindings to SonarQube/SonarCloud",
        "category": "SonarLint"
      },
      {
        "command": "SonarLint.ShowSonarLintOutput",
        "title": "Show SonarLint Output",
        "category": "SonarLint"
      },
      {
        "command": "SonarLint.DeactivateRule",
        "title": "Deactivate",
        "icon": {
          "light": "images/activation/light/cross.svg",
          "dark": "images/activation/dark/cross.svg"
        }
      },
      {
        "command": "SonarLint.ActivateRule",
        "title": "Activate",
        "icon": {
          "light": "images/activation/light/check.svg",
          "dark": "images/activation/dark/check.svg"
        }
      },
      {
        "command": "SonarLint.ResetDefaultRule",
        "title": "Reset",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowAllRules",
        "title": "All",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowActiveRules",
        "title": "Active",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowInactiveRules",
        "title": "Inactive",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.FindRuleByKey",
        "title": "Find Rule By Key",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ClearLocations",
        "title": "Clear",
        "enablement": "view == SonarLint.IssueLocations"
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "SonarLint.AllRules",
          "name": "SonarLint Rules"
        },
        {
          "id": "SonarLint.IssueLocations",
          "name": "SonarLint Issue Locations"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "SonarLint.IssueLocations",
        "contents": "No locations to show.\nUse \"Show all locations\" code action from a SonarLint issue."
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "SonarLint.ShowAllRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ShowActiveRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ShowInactiveRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.FindRuleByKey",
          "when": "view == SonarLint.AllRules"
        },
        {
          "command": "SonarLint.ClearLocations",
          "when": "view == SonarLint.IssueLocations",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "SonarLint.DeactivateRule",
          "when": "view == SonarLint.AllRules && viewItem == rule-on",
          "group": "inline"
        },
        {
          "command": "SonarLint.ActivateRule",
          "when": "view == SonarLint.AllRules && viewItem == rule-off",
          "group": "inline"
        }
      ]
    },
    "colors": [
      {
        "id": "sonarlint.locations.background",
        "description": "Background color for highlighted secondary locations of SonarLint issues",
        "defaults": {
          "light": "#f2dede",
          "dark": "#523e3e",
          "highContrast": "#523e3e"
        }
      },
      {
        "id": "sonarlint.locations.indexText",
        "description": "Text color for secondary location index of SonarLint issues",
        "defaults": {
          "light": "#fff",
          "dark": "#ccc",
          "highContrast": "#ccc"
        }
      },
      {
        "id": "sonarlint.locations.indexBackground",
        "description": "Background color for secondary location index of SonarLint issues",
        "defaults": {
          "light": "#d18582",
          "dark": "#74232f",
          "highContrast": "#74232f"
        }
      },
      {
        "id": "sonarlint.locations.indexSelectedText",
        "description": "Text color for active secondary location index of SonarLint issues",
        "defaults": {
          "light": "#fff",
          "dark": "#fff",
          "highContrast": "#fff"
        }
      },
      {
        "id": "sonarlint.locations.indexSelectedBackground",
        "description": "Background color for active secondary location index of SonarLint issues",
        "defaults": {
          "light": "#a4030f",
          "dark": "#b4131f",
          "highContrast": "#b4131f"
        }
      }
    ]
  },
  "main": "./dist/extension",
  "files": [
    "server/sonarlint-ls.jar",
    "analyzers"
  ],
  "scripts": {
    "vscode:prepublish": "node scripts/prepare.js && webpack --mode production",
    "compile": "tsc -p ./",
    "webpack": "webpack --mode development",
    "pretest": "webpack --mode development && tsc -p ./",
    "test": "node out/test/runTest.js",
    "test-cov": "node out/test/runTest.js --coverage",
    "prepare": "node scripts/prepare.js"
  },
  "dependencies": {
    "expand-home-dir": "0.0.3",
    "find-java-home": "1.1.0",
    "follow-redirects": "1.13.0",
    "inly": "4.0.8",
    "luxon": "1.26.0",
    "open": "7.3.0",
    "path-exists": "4.0.0",
    "compare-versions": "3.6.0",
    "vscode-languageclient": "7.0.0"
  },
  "devDependencies": {
    "@types/chai": "^4.2.10",
    "@types/follow-redirects": "1.8.0",
    "@types/glob": "5.0.30",
    "@types/luxon": "1.26.2",
    "@types/mocha": "^5.2.5",
    "@types/node": "^10.17.17",
    "@types/vscode": "^1.41.0",
    "chai": "^4.2.0",
    "crypto": "^0.0.3",
    "dateformat": "^2.0.0",
    "del": "^2.2.2",
    "expect.js": "^0.3.1",
    "glob": "^7.1.6",
    "gulp": "^4.0.2",
    "gulp-artifactory-upload": "^1.4.0",
    "gulp-bump": "^3.1.3",
    "gulp-cli": "^2.2.0",
    "gulp-download": "^0.0.1",
    "gulp-rename": "^1.4.0",
    "gulp-util": "^3.0.8",
    "istanbul-lib-coverage": "^2.0.5",
    "istanbul-lib-instrument": "^3.3.0",
    "istanbul-lib-report": "^2.0.8",
    "istanbul-lib-source-maps": "^3.0.6",
    "istanbul-reports": "^2.2.7",
    "mocha": "^5.2.0",
    "mocha-multi-reporters": "^1.1.7",
    "prettier": "2.0.5",
    "sonarqube-scanner": "^2.5.0",
    "through2": "^2.0.5",
    "ts-loader": "6.0.4",
    "typescript": "^3.8.3",
    "vsce": "^1.74.0",
    "vscode-test": "^1.3.0",
    "webpack": "^4.42.0",
    "webpack-cli": "3.3.6"
  },
  "prettier": {
    "jsxBracketSameLine": true,
    "printWidth": 120,
    "singleQuote": true,
    "tabWidth": 2,
    "useTabs": false,
    "arrowParens": "avoid",
    "trailingComma": "none",
    "bracketSpacing": true
  }
}
