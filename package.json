{
  "name": "sonarlint-vscode",
  "displayName": "SonarLint",
  "description": "SonarLint is an IDE extension that helps you detect and fix quality issues as you write code in C, C++, Java, JavaScript, PHP, Python, HTML and TypeScript.",
  "version": "3.6.0-SNAPSHOT",
  "icon": "images/sonarlint_wave_128px.png",
  "publisher": "SonarSource",
  "homepage": "http://www.sonarlint.org",
  "repository": {
    "type": "git",
    "url": "https://github.com/SonarSource/sonarlint-vscode.git"
  },
  "bugs": {
    "url": "https://jira.sonarsource.com/browse/SLVSCODE"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "engines": {
    "vscode": "^1.52.0"
  },
  "categories": [
    "Linters"
  ],
  "keywords": [
    "Code Security",
    "Code Quality",
    "C",
    "C++",
    "Java",
    "JavaScript",
    "PHP",
    "Python",
    "TypeScript",
    "Code Analysis"
  ],
  "qna": "https://community.sonarsource.com/c/help/sl",
  "activationEvents": [
    "onCommand:SonarLint.UpdateAllBindings",
    "onCommand:SonarLint.ShowSonarLintOutput",
    "onCommand:SonarLint.ConfigureCompilationDatabase",
    "onStartupFinished"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "SonarLint",
      "properties": {
        "sonarlint.rules": {
          "order": 1,
          "type": "object",
          "scope": "application",
          "default": {},
          "markdownDescription": "Customize applied rule set. This property contains a list of rules whose activation level or parameter values differ from the one provided by default. See _SonarLint Rules_ view for the full list of available rules. In connected mode, this configuration is overridden by the projects's quality profile, as configured on server side.\n\nExample:\n\n    \"sonarlint.rules\": {\n        \"javascript:1481\": {\n            \"level\": \"off\",\n        \"javascript:S103\": {\n            \"level\": \"on\",\n            \"parameters\": {\n                \"maximumLineLength\": \"120\"\n            }\n        }\n    }\n",
          "patternProperties": {
            "^[^:]+:[^:]+$": {
              "type": "object",
              "markdownDescription": "Property names are rule keys in the form: `repo:key`",
              "properties": {
                "level": {
                  "type": "string",
                  "enum": [
                    "off",
                    "on"
                  ],
                  "markdownDescription": "When set to `off`, disable the rule. When set to `on`, enable the rule."
                },
                "parameters": {
                  "type": "object",
                  "markdownDescription": "Rule parameters. See rule description for accepted parameters. E.g `{ \"intParam\": \"123\" }`."
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "sonarlint.connectedMode.servers": {
          "deprecationMessage": "The setting is deprecated. Use `sonarlint.connectedMode.connections.sonarqube` or `sonarlint.connectedMode.connections.sonarcloud` instead.",
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Configure one or more connection(s) to SonarQube/SonarCloud. For security reasons, the token should not be stored in SCM with workspace settings. The `serverId` can be any identifier and will be referenced in `#sonarlint.connectedMode.project#`.\n\nExample for SonarCloud:\n\n    \"sonarlint.connectedMode.servers\": [\n      {\n        \"serverId\": \"my_orga_in_sonarcloud.io\",\n        \"serverUrl\": \"https://sonarcloud.io\",\n        \"organizationKey\": \"my_organization\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]\n\nExample for SonarQube:\n\n    \"sonarlint.connectedMode.servers\": [\n      {\n        \"serverId\": \"my_sonarqube\",\n        \"serverUrl\": \"https://sonar.mycompany.com\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]",
          "items": {
            "properties": {
              "serverId": {
                "type": "string",
                "description": "A unique identifier for this server connection. Will be referenced from `#sonarlint.connectedMode.project#`"
              },
              "serverUrl": {
                "type": "string",
                "description": "URL of the server. Use https://sonarcloud.io for SonarCloud."
              },
              "token": {
                "type": "string",
                "description": "Token generated from My Account>Security in SonarQube/SonarCloud"
              },
              "organizationKey": {
                "type": "string",
                "description": "Only used for SonarCloud"
              }
            },
            "additionalProperties": false
          }
        },
        "sonarlint.connectedMode.connections.sonarqube": {
          "order": 2,
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Configure connection(s) to [SonarQube](https://sonarqube.org). For each connection, please provide:\n- `serverUrl`: your SonarQube server URL\n- `token`: a personal authentication token ([How to generate one](https://docs.sonarqube.org/latest/user-guide/user-token/))\n\nOptionally specify a `connectionId` if you want to use multiple connections.\nSet `disableNotifications` to `true` to disable [Smart Notifications](https://docs.sonarqube.org/latest/user-guide/connected-mode/).\n\nDon't forget to also configure project binding for each workspace folder using configuration `#sonarlint.connectedMode.project#`.\n\nExample:\n\n    \"sonarlint.connectedMode.connections.sonarqube\": [\n      {\n        \"serverUrl\": \"https://sonar.mycompany.com\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]",
          "examples": [
            [
              {
                "serverUrl": "https://<replace_with_your_sonarqube_server_url>",
                "token": "<replace_with_a_sonarqube_token>"
              }
            ],
            [
              {
                "connectionId": "MyCompanySonarQube",
                "serverUrl": "https://<replace_with_your_sonarqube_server_url>",
                "token": "<replace_with_a_sonarqube_token>",
                "disableNotifications": false
              }
            ]
          ],
          "items": {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "A unique identifier for this connection to be used as a reference in `#sonarlint.connectedMode.project#`. Only needed if you plan to use multiple connections to SonarQube/SonarCloud."
              },
              "serverUrl": {
                "type": "string",
                "description": "URL of the SonarQube server."
              },
              "token": {
                "type": "string",
                "description": "Token generated from 'My Account>Security' in SonarQube"
              },
              "disableNotifications": {
                "type": "boolean",
                "description": "SonarLint will show notifications for bound projects when there are new issues assigned to you, or when the quality gate status changed. Set to false to disable all notifications for projects bound to this connection."
              }
            },
            "additionalProperties": false,
            "required": [
              "serverUrl",
              "token"
            ],
            "examples": [
              {
                "serverUrl": "https://<replace_with_your_sonarqube_server_url>",
                "token": "<replace_with_a_sonarqube_token>"
              },
              {
                "connectionId": "MyCompanySonarQube",
                "serverUrl": "https://<replace_with_your_sonarqube_server_url>",
                "token": "<replace_with_a_sonarqube_token>",
                "disableNotifications": false
              }
            ]
          }
        },
        "sonarlint.connectedMode.connections.sonarcloud": {
          "order": 3,
          "type": "array",
          "scope": "application",
          "default": [],
          "markdownDescription": "Configure connection(s) to [SonarCloud](https://sonarcloud.io). For each connection, please provide:\n- `organizationKey`: the key of your SonarCloud organization\n- `token`: a personal authentication token ([How to generate one](https://docs.sonarcloud.io/advanced-setup/user-accounts/#user-tokens))\n\nOptionally specify a `connectionId` if you want to use multiple connections.\nSet `disableNotifications` to `true` to disable [Smart Notifications](https://docs.sonarcloud.io/advanced-setup/sonarlint-smart-notifications/).\n\nDon't forget to also configure the project binding for each workspace folder using configuration `#sonarlint.connectedMode.project#`.\nIf you have projects in different SonarCloud organizations, simply declare multiple connections.\n\nExample:\n\n    \"sonarlint.connectedMode.connections.sonarcloud\": [\n      {\n        \"organizationKey\": \"myOrg\",\n        \"token\": \"V2VkIE1...\"\n      }\n    ]",
          "examples": [
            [
              {
                "organizationKey": "<replace_with_your_sonarcloud_organization_key>",
                "token": "<replace_with_a_sonarcloud_token>"
              }
            ],
            [
              {
                "connectionId": "MyOrganization",
                "organizationKey": "<replace_with_your_sonarcloud_organization_key>",
                "token": "<replace_with_a_sonarcloud_token>",
                "disableNotifications": false
              }
            ]
          ],
          "items": {
            "type": "object",
            "properties": {
              "connectionId": {
                "type": "string",
                "description": "A unique identifier for this connection to be used as a reference in `#sonarlint.connectedMode.project#`. Only needed if you plan to use multiple connections to SonarQube/SonarCloud."
              },
              "organizationKey": {
                "type": "string",
                "description": "A SonarCloud organization key. If you want to bind different projects that are in different organizations, simply declare multiple connections."
              },
              "token": {
                "type": "string",
                "description": "Token generated from 'My Account>Security' in SonarCloud"
              },
              "disableNotifications": {
                "type": "boolean",
                "description": "SonarLint will show notifications for bound projects when there are new issues assigned to you, or when the quality gate status changed. Set to false to disable all notifications for projects bound to this connection."
              }
            },
            "additionalProperties": false,
            "required": [
              "organizationKey",
              "token"
            ],
            "examples": [
              {
                "organizationKey": "<replace_with_your_sonarcloud_organization_key>",
                "token": "<replace_with_a_sonarcloud_token>"
              },
              {
                "connectionId": "MyOrganization",
                "organizationKey": "<replace_with_your_sonarcloud_organization_key>",
                "token": "<replace_with_a_sonarcloud_token>",
                "disableNotifications": false
              }
            ]
          }
        },
        "sonarlint.connectedMode.project": {
          "order": 4,
          "markdownDescription": "Bind the current workspace folder to a [SonarQube](https://sonarqube.org) or [SonarCloud](https://sonarcloud.io) project. Requires connection details to be defined in the setting `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`.\n\nBinding a workspace folder to a project allows to use the same rules and configuration that are defined in the server, as well as issue suppressions.\n\nExample:\n\n    \"sonarlint.connectedMode.project\": {\n      \"projectKey\": \"my_project\"\n    }\n\nSpecify the `connectionId` only if you have defined multiple connections.",
          "examples": [
            {
              "projectKey": "<replace_with_server_project_key>"
            },
            {
              "connectionId": "<replace_with_connection_id>",
              "projectKey": "<replace_with_server_project_key>"
            }
          ],
          "default": {},
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "serverId": {
                  "type": "string",
                  "description": "Identifier of the server connection declared in `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`"
                },
                "projectKey": {
                  "type": "string",
                  "description": "Key of the project in SonarQube/SonarCloud"
                }
              },
              "additionalProperties": false,
              "required": [
                "serverId",
                "projectKey"
              ],
              "deprecationMessage": "Replace `serverId` attribute by `connectionId`."
            },
            {
              "type": "object",
              "properties": {
                "connectionId": {
                  "type": "string",
                  "description": "Identifier of the server connection declared in `#sonarlint.connectedMode.connections.sonarqube#` or `#sonarlint.connectedMode.connections.sonarcloud#`"
                },
                "projectKey": {
                  "type": "string",
                  "description": "Key of the project in SonarQube/SonarCloud (can be found on project homepage)"
                }
              },
              "additionalProperties": false,
              "required": [
                "projectKey"
              ]
            }
          ],
          "scope": "resource"
        },
        "sonarlint.pathToNodeExecutable": {
          "order": 10,
          "type": "string",
          "markdownDescription": "Path to a Node.js executable (12.22.0 or more recent) used to analyze JavaScript and TypeScript code. \nOn Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\NodeJS\\\\12-lts\\\\bin\\\\node.exe`",
          "scope": "machine"
        },
        "sonarlint.pathToCompileCommands": {
          "order": 11,
          "type": "string",
          "markdownDescription": "Path to the active compilation database, e.g. `C:\\\\Repos\\\\MyProject\\\\compile_commands.json`",
          "scope": "resource"
        },
        "sonarlint.testFilePattern": {
          "order": 12,
          "type": "string",
          "default": "",
          "markdownDescription": "Files whose name match this [glob pattern](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) are considered as test files by analyzers. Most rules are *not* evaluated on test files. Example: `{**/test/**,**/*test*,**/*Test*}`",
          "scope": "resource"
        },
        "sonarlint.ls.javaHome": {
          "order": 20,
          "type": "string",
          "markdownDescription": "Path to a Java Runtime Environment (11 or more recent) used to launch the SonarLint Language Server. \n* On Windows, backslashes must be escaped, e.g. `C:\\\\Program Files\\\\Java\\\\jdk-11.0.12+7` \n* On macOS, this path should include the `/Contents/Home` directory, e.g `/Library/Java/JavaVirtualMachines/jdk-11.0.12+7.jdk/Contents/Home`",
          "scope": "machine"
        },
        "sonarlint.ls.vmargs": {
          "order": 21,
          "type": "string",
          "markdownDescription": "Extra JVM arguments used to launch the SonarLint Language Server. e.g. `-Xmx1024m`",
          "scope": "machine"
        },
        "sonarlint.output.showVerboseLogs": {
          "order": 90,
          "type": "boolean",
          "default": false,
          "description": "Enable verbose log level in the SonarLint output.",
          "scope": "window"
        },
        "sonarlint.output.showAnalyzerLogs": {
          "order": 91,
          "type": "boolean",
          "default": false,
          "description": "Show analyzer's logs in the SonarLint output.",
          "scope": "window"
        },
        "sonarlint.analyzerProperties": {
          "order": 92,
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "type": "string",
              "markdownDescription": "One entry value"
            },
            "additionalProperties": false
          },
          "markdownDescription": "Extra properties that could be passed to the code analyzers. Only for advanced use cases.",
          "scope": "resource"
        },
        "sonarlint.trace.server": {
          "order": 98,
          "default": "off",
          "description": "Traces the communication between VS Code and the SonarLint language server.",
          "scope": "window",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "off",
                "messages",
                "verbose"
              ],
              "default": "off"
            },
            {
              "type": "object",
              "properties": {
                "verbosity": {
                  "type": "string",
                  "enum": [
                    "off",
                    "messages",
                    "verbose"
                  ],
                  "default": "off"
                },
                "format": {
                  "type": "string",
                  "enum": [
                    "text",
                    "json"
                  ],
                  "default": "text"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "sonarlint.disableTelemetry": {
          "order": 99,
          "type": "boolean",
          "default": false,
          "markdownDescription": "Disable sending anonymous usage statistics to SonarSource. Click [here](https://github.com/SonarSource/sonarlint-vscode/blob/master/telemetry-sample.md) to see a sample of the data that are collected.",
          "scope": "window"
        }
      }
    },
    "commands": [
      {
        "command": "SonarLint.UpdateAllBindings",
        "title": "Update all project bindings to SonarQube/SonarCloud",
        "category": "SonarLint"
      },
      {
        "command": "SonarLint.ShowSonarLintOutput",
        "title": "Show SonarLint Output",
        "category": "SonarLint"
      },
      {
        "command": "SonarLint.ConfigureCompilationDatabase",
        "title": "Configure the compilation database for C and C++ analysis",
        "category": "SonarLint"
      },
      {
        "command": "SonarLint.DeactivateRule",
        "title": "Deactivate",
        "icon": {
          "light": "images/activation/light/cross.svg",
          "dark": "images/activation/dark/cross.svg"
        },
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ActivateRule",
        "title": "Activate",
        "icon": {
          "light": "images/activation/light/check.svg",
          "dark": "images/activation/dark/check.svg"
        },
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ResetDefaultRule",
        "title": "Reset",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowAllRules",
        "title": "All",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowActiveRules",
        "title": "Active",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ShowInactiveRules",
        "title": "Inactive",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.FindRuleByKey",
        "title": "Find Rule By Key",
        "enablement": "view == SonarLint.AllRules"
      },
      {
        "command": "SonarLint.ClearLocations",
        "title": "Clear",
        "enablement": "view == SonarLint.IssueLocations"
      },
      {
        "command": "SonarLint.ConnectToSonarQube",
        "title": "Connect To SonarQube",
        "category": "SonarLint"
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "SonarLint.AllRules",
          "name": "SonarLint Rules"
        },
        {
          "id": "SonarLint.IssueLocations",
          "name": "SonarLint Issue Locations"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "SonarLint.IssueLocations",
        "contents": "No locations to show.\nUse \"Show all locations\" code action from a SonarLint issue."
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "SonarLint.ShowAllRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ShowActiveRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.ShowInactiveRules",
          "when": "view == SonarLint.AllRules",
          "group": "navigation"
        },
        {
          "command": "SonarLint.FindRuleByKey",
          "when": "view == SonarLint.AllRules"
        },
        {
          "command": "SonarLint.ClearLocations",
          "when": "view == SonarLint.IssueLocations",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "SonarLint.DeactivateRule",
          "when": "view == SonarLint.AllRules && viewItem == rule-on",
          "group": "inline"
        },
        {
          "command": "SonarLint.ActivateRule",
          "when": "view == SonarLint.AllRules && viewItem == rule-off",
          "group": "inline"
        }
      ]
    },
    "colors": [
      {
        "id": "sonarlint.locations.background",
        "description": "Background color for highlighted secondary locations of SonarLint issues",
        "defaults": {
          "light": "#f2dede",
          "dark": "#523e3e",
          "highContrast": "#523e3e"
        }
      },
      {
        "id": "sonarlint.locations.indexText",
        "description": "Text color for secondary location index of SonarLint issues",
        "defaults": {
          "light": "#fff",
          "dark": "#ccc",
          "highContrast": "#ccc"
        }
      },
      {
        "id": "sonarlint.locations.indexBackground",
        "description": "Background color for secondary location index of SonarLint issues",
        "defaults": {
          "light": "#d18582",
          "dark": "#74232f",
          "highContrast": "#74232f"
        }
      },
      {
        "id": "sonarlint.locations.indexSelectedText",
        "description": "Text color for active secondary location index of SonarLint issues",
        "defaults": {
          "light": "#fff",
          "dark": "#fff",
          "highContrast": "#fff"
        }
      },
      {
        "id": "sonarlint.locations.indexSelectedBackground",
        "description": "Background color for active secondary location index of SonarLint issues",
        "defaults": {
          "light": "#a4030f",
          "dark": "#b4131f",
          "highContrast": "#b4131f"
        }
      }
    ]
  },
  "main": "./dist/extension",
  "files": [
    "server/sonarlint-ls.jar",
    "analyzers"
  ],
  "scripts": {
    "vscode:prepublish": "node scripts/prepare.js && webpack --mode production",
    "compile": "tsc -p ./",
    "webpack": "webpack --mode development",
    "pretest": "webpack --mode development && tsc -p ./",
    "test": "node out/test/runTest.js",
    "test-cov": "node out/test/runTest.js --coverage",
    "prepare": "node scripts/prepare.js",
    "cyclonedx-run": "cyclonedx-node",
    "cyclonedx": "gulp cycloneDx"
  },
  "dependencies": {
    "@vscode/webview-ui-toolkit": "1.0.0",
    "compare-versions": "4.1.3",
    "expand-home-dir": "0.0.3",
    "find-java-home": "1.2.2",
    "follow-redirects": "1.14.7",
    "inly": "4.0.8",
    "luxon": "2.3.0",
    "path-exists": "4.0.0",
    "vscode-languageclient": "7.0.0"
  },
  "devDependencies": {
    "@cyclonedx/bom": "^3.8.0",
    "@types/chai": "^4.2.10",
    "@types/follow-redirects": "1.13.1",
    "@types/glob": "5.0.30",
    "@types/luxon": "2.0.9",
    "@types/mocha": "9.0.0",
    "@types/node": "^10.17.17",
    "@types/vscode": "^1.41.0",
    "chai": "^4.2.0",
    "crypto": "^0.0.3",
    "dateformat": "^2.0.0",
    "del": "^2.2.2",
    "expect.js": "^0.3.1",
    "fancy-log": "1.3.3",
    "glob": "^7.1.6",
    "gulp": "4.0.2",
    "gulp-artifactory-upload": "^1.4.0",
    "gulp-bump": "3.2.0",
    "gulp-cli": "2.3.0",
    "gulp-exec": "5.0.0",
    "gulp-rename": "^1.4.0",
    "istanbul-lib-coverage": "^2.0.5",
    "istanbul-lib-instrument": "^3.3.0",
    "istanbul-lib-report": "^2.0.8",
    "istanbul-lib-source-maps": "^3.0.6",
    "istanbul-reports": "^2.2.7",
    "map-stream": "^0.1.0",
    "mocha": "9.1.3",
    "mocha-multi-reporters": "^1.1.7",
    "openpgp": "^5.2.1",
    "prettier": "2.0.5",
    "sonarqube-scanner": "^2.5.0",
    "stream": "^0.0.2",
    "through2": "^2.0.5",
    "ts-loader": "6.0.4",
    "typescript": "^3.8.3",
    "vinyl": "^2.2.1",
    "vsce": "^1.100.2",
    "vscode-test": "^1.3.0",
    "webpack": "5.60.0",
    "webpack-cli": "4.9.1"
  },
  "prettier": {
    "jsxBracketSameLine": true,
    "printWidth": 120,
    "singleQuote": true,
    "tabWidth": 2,
    "useTabs": false,
    "arrowParens": "avoid",
    "trailingComma": "none",
    "bracketSpacing": true
  }
}
