stages:
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    stageDisplayName: Build and stage to repox
    jobs:
    - job: build
      displayName: Build and stage to repox
      steps:
      - task: Npm@1
        displayName: 'Install NPM dependencies'
        env:
          ARTIFACTORY_PRIVATE_READER_USERNAME: $(ARTIFACTORY_PRIVATE_READER_USERNAME)
          ARTIFACTORY_PRIVATE_READER_PASSWORD: $(ARTIFACTORY_PRIVATE_READER_PASSWORD)
        inputs:
          command: install
      - task: DownloadSecureFile@1
        displayName: 'Download the sign key'
        name: signKey
        inputs:
          secureFile: 'sign-key.asc'
      - task: gulp@1
        displayName: 'Build and deploy universal VSIX'
        env:
          SIGN_KEY: $(signKey.secureFilePath)
          PGP_PASSPHRASE: $(PGP_PASSPHRASE)
          ARTIFACTORY_DEPLOY_USERNAME: $(ARTIFACTORY_DEPLOY_USERNAME)
          ARTIFACTORY_DEPLOY_PASSWORD: $(ARTIFACTORY_DEPLOY_PASSWORD)
          ARTIFACTORY_PRIVATE_READER_USERNAME: $(ARTIFACTORY_PRIVATE_READER_USERNAME)
          ARTIFACTORY_PRIVATE_READER_PASSWORD: $(ARTIFACTORY_PRIVATE_READER_PASSWORD)
        inputs:
          gulpjs: node_modules/.bin/gulp
          targets: deploy
        condition: and(
          succeeded(), 
          and(
            ne( // branch is not main
              variables['Build.SourceBranch'], 'refs/heads/master'
            ), 
            not( // branch do not ends with allvsix
              endsWith(
                variables['System.PullRequest.SourceBranch'], 'allvsix'
              )
            )
          )
        )
      - task: gulp@1
        displayName: 'Build and deploy all VSIX files'
        env:
          SIGN_KEY: $(signKey.secureFilePath)
          PGP_PASSPHRASE: $(PGP_PASSPHRASE)
          ARTIFACTORY_DEPLOY_USERNAME: $(ARTIFACTORY_DEPLOY_USERNAME)
          ARTIFACTORY_DEPLOY_PASSWORD: $(ARTIFACTORY_DEPLOY_PASSWORD)
          ARTIFACTORY_PRIVATE_READER_USERNAME: $(ARTIFACTORY_PRIVATE_READER_USERNAME)
          ARTIFACTORY_PRIVATE_READER_PASSWORD: $(ARTIFACTORY_PRIVATE_READER_PASSWORD)
        inputs:
          gulpjs: node_modules/.bin/gulp
          targets: deploy-all
        condition: and(
          succeeded(), 
          or(
            eq(
              variables['Build.SourceBranch'], 'refs/heads/master'
            ), 
            endsWith(
              variables['System.PullRequest.SourceBranch'], 'allvsix'
            )
          )
        )
      - bash: git checkout .
        name: revertPackageJsonChanges
        displayName: Revert changes made to package.json to not break cache feature

- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'validate'
    burgrType: 'validate'
    stageName: 'validate'
    stageDisplayName: Run tests, SonarQube analysis and Mend scan
    jobs:
    - job: test_linux
      displayName: Run tests, SonarQube analysis and Mend analysis on Linux
      steps:


      - template: mend.yml@commonTemplates
        parameters:
          releaseVersion: '$(MEND_PROJECT_VERSION)'

- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'qa'
    burgrType: 'qa'
    stageName: 'qa'
    stageDisplayName: Run ITs
    stageDependencies: build
    jobs:
    - job: its
      displayName: Run ITs
      steps:
      - bash: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y xvfb
          sudo cp .azure-pipelines/xvfb.init /etc/init.d/xvfb
          sudo chmod +x /etc/init.d/xvfb
          sudo update-rc.d xvfb defaults
          sudo service xvfb start
          export DISPLAY=':10'
        displayName: 'Install and start xvfb'
      - task: JavaToolInstaller@0
        displayName: 'Switch to Java 11'
        inputs:
          versionSpec: '11'
          jdkSourceOption: PreInstalled
          jdkArchitectureOption: x64
          cleanDestinationDirectory: false
      - task: Npm@1
        displayName: 'Install NPM dependencies'
        inputs:
          workingDir: its
          command: ci
      - task: Npm@1
        displayName: 'Run ITs'
        inputs:
          workingDir: its
          command: custom
          customCommand: test
      - bash: |
          echo " "
          echo " >>>>> SonarLint console"
          echo " "
          find its/userdir -name '*SonarLint.log' -exec cat {} \;
          echo " "
          echo " >>>>> Extension host log"
          echo " "
          find its/userdir -name 'exthost.log' -exec cat {} \;
        condition: succeededOrFailed()
        displayName: 'Dump Code logs'
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/*tests.xml'
          failTaskOnFailedTests: true
          testRunTitle: 'ITs $(VSCODE_VERSION)'
- template: promote-stage.yml@commonTemplates
  parameters:
    stageDependencies:
    - validate
    - qa
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'dogfood'
    burgrType: 'dogfood'
    stageName: 'update_dogfood_repo'
    stageDisplayName: Update internal extension dogfooding file
    stageCondition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
    stageDependencies: promote
    jobs:
      - job: updateInternalSite
        displayName: Update internal dogfooding file on repox
        steps:
          - checkout: none
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
          - bash: pip3 install requests
          - task: PythonScript@0
            name: updateInternalSiteOnRepox
            inputs:
              scriptSource: 'inline'
              script: |
                import requests
                import sys
                import json

                githubSlug = '$(Build.Repository.ID)'
                githubProject = githubSlug.split("/", 1)[1]
                buildNumber = '$(Build.BuildId)'

                buildInfoUrl = f'$(ARTIFACTORY_URL)/api/build/{githubProject}/{buildNumber}'
                buildInfoResp = requests.get(url=buildInfoUrl, auth=('$(ARTIFACTORY_API_USER)', '$(ARTIFACTORY_API_KEY)'))
                buildInfoJson = buildInfoResp.json()

                buildInfo = buildInfoJson.get('buildInfo', {})
                buildInfoProperties = buildInfo.get('properties', {})

                # PROJECT_VERSION is set by the compute-build-version-step.yml
                version = buildInfoProperties.get('buildInfo.env.PROJECT_VERSION', 'NOT_FOUND')

                dogfoodJson = json.dumps({
                  'version': version,
                  'url': f"$(ARTIFACTORY_URL)/sonarsource/org/sonarsource/sonarlint/vscode/sonarlint-vscode/{version}/sonarlint-vscode-{version}.vsix"
                })
                updateDogfoodJsonUrl = "$(ARTIFACTORY_URL)/sonarsource-public-builds/org/sonarsource/sonarlint/vscode/sonarlint-vscode/dogfood.json"
                response = requests.put(url=updateDogfoodJsonUrl, data=dogfoodJson, auth=('$(ARTIFACTORY_API_USER)', '$(ARTIFACTORY_API_KEY)'))
                if not response.status_code == 201:
                  sys.exit('[!] [{0}] Server Error'.format(response.status_code))
