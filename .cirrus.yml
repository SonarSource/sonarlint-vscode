env:
  CIRRUS_CLONE_DEPTH: "20"
  # Use bash (instead of sh on linux or cmd.exe on Windows)
  CIRRUS_SHELL: bash
  # burgr notification
  BURGR_URL: VAULT[development/kv/data/burgr data.url]
  BURGR_USERNAME: VAULT[development/kv/data/burgr data.cirrus_username]
  BURGR_PASSWORD: VAULT[development/kv/data/burgr data.cirrus_password]
  # repox
  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa

  ARTIFACTORY_PRIVATE_READER_USERNAME: $ARTIFACTORY_PRIVATE_USERNAME
  ARTIFACTORY_PRIVATE_READER_PASSWORD: $ARTIFACTORY_PRIVATE_PASSWORD
  GPG_SIGNING_KEY: VAULT[development/kv/data/sign data.key]
  GPG_SIGNING_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]

  SONAR_TOKEN: VAULT[development/kv/data/next data.token]
  SONAR_HOST_URL: VAULT[development/kv/data/next data.url]

auto_cancellation: $CIRRUS_BRANCH != 'master'

eks_container: &CONTAINER_DEFINITION
  dockerfile: .cirrus/Dockerfile
  docker_arguments:
    CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
  region: eu-central-1
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  builder_role: cirrus-builder
  builder_image: docker-builder-v*
  builder_instance_type: t2.small
  builder_subnet_id: ${CIRRUS_AWS_SUBNET}
  namespace: default

eks_xvfb_container: &XVFB_CONTAINER_DEFINITION
  dockerfile: .cirrus/XVFB_Dockerfile
  docker_arguments:
    CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
    JDK_VERSION: 11
  region: eu-central-1
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  builder_role: cirrus-builder
  builder_image: docker-builder-v*
  builder_instance_type: t2.small
  builder_subnet_id: ${CIRRUS_AWS_SUBNET}
  namespace: default

ec2_instance: &WINVM_DEFINITION
  experimental: true
  image: base-windows-jdk17-v*
  platform: windows
  region: eu-central-1
  subnet_id: ${CIRRUS_AWS_SUBNET}
  type: t3.xlarge

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

skip_master_branch_and_allvsix_branch: &SKIP_MASTER_BRANCH_AND_ALLVSIX_BRANCH
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_BRANCH != "master"  && ($CIRRUS_PR != "" && $CIRRUS_BRANCH !=~ ".*allvsix"))

only_master_or_allvsix_branch: &ONLY_MASTER_BUILD_OR_ALLVSIX_BRANCH
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_BRANCH == "master" || ($CIRRUS_PR != "" && $CIRRUS_BRANCH =~ ".*allvsix"))

node_modules_cache_template: &NODE_MODULES_CACHE_TEMPLATE
  node_modules_cache:
    folder: "node_modules"
    reupload_on_changes: false # since there is a fingerprint script
    fingerprint_script:
      - echo $CIRRUS_OS
      - node --version
      - cat package-lock.json
    populate_script: npm install

build_task:
  name: Setup
  alias: setup
  <<: *ONLY_SONARSOURCE_QA
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 2
    memory: 2G
  <<: *NODE_MODULES_CACHE_TEMPLATE
  setup_script:
    - source cirrus-env BUILD # Generates a build number
    - echo $BUILD_NUMBER

#deploy_universal_vsix_task:
#  name: Deploy universal VSIX
#  alias: deploy_universal_vsix
#  depends_on: setup
#  <<: *SKIP_MASTER_BRANCH_AND_ALLVSIX_BRANCH
#  eks_container:
#    <<: *CONTAINER_DEFINITION
#    cpu: 2
#    memory: 2G
#  <<: *NODE_MODULES_CACHE_TEMPLATE
#  deploy_script:
#    - source cirrus-env QA # Retrieve build number
#    - node_modules/.bin/gulp deploy
#
#deploy_all_vsix_files_task:
#  name: Deploy all VSIX files
#  alias: deploy_all_vsix_files
#  <<: *ONLY_MASTER_BUILD_OR_ALLVSIX_BRANCH
#  depends_on: setup
#  eks_container:
#    <<: *CONTAINER_DEFINITION
#    cpu: 2
#    memory: 2G
#  <<: *NODE_MODULES_CACHE_TEMPLATE
#  deploy_all_script:
#    - source cirrus-env QA # Retrieve build number
#    - node_modules/.bin/gulp deploy-all

validate_task:
  name: Run tests, SonarQube analysis
  alias: validate
  depends_on: setup
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 2
    memory: 2G
  <<: *NODE_MODULES_CACHE_TEMPLATE
  start_xvfb_background_script:
    - /etc/init.d/xvfb start
  script:
    - echo "Validate"
#    - ci
#    - npm run compile

test_windows_task:
  name: Run tests on Windows
  alias: test_windows
  depends_on: validate
  ec2_instance:
    <<: *WINVM_DEFINITION
  <<: *NODE_MODULES_CACHE_TEMPLATE
  script:
    - source cirrus-env QA
    - npm run compile
    - npm run prepare
    - npm run test-cov
  always:
    unit_tests_artifacts:
      path: '**/alltests.xml'
      format: junit

test_linux_task:
  name: Run tests, SonarQube analysis on Linux
  alias: test_linux
  depends_on: validate
  eks_container:
    <<: *XVFB_CONTAINER_DEFINITION
    cpu: 4
    memory: 4G
  <<: *NODE_MODULES_CACHE_TEMPLATE
  env:
    DISPLAY: ":10"
  script:
    - source cirrus-env QA
    - echo $DISPLAY
    - npm i
    - node_modules/.bin/gulp package
    - cd its
    - npm i
    - npm test
  always:
    unit_tests_artifacts:
      path: '**/*tests.xml'
      format: junit

#mend_task:
